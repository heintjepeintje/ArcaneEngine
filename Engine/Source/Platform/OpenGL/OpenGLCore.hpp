#pragma once

#include <Arcane/Core.hpp>

#include <cstdint>

#define GLAPI extern

typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef int8_t GLbyte;
typedef uint8_t GLubyte;
typedef int16_t GLshort;
typedef uint16_t GLushort;
typedef int GLint;
typedef unsigned int GLuint;
typedef int32_t GLclampx;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;

typedef uint16_t GLhalf;
typedef uint16_t GLhalfARB;
typedef int32_t GLfixed;
typedef intptr_t GLintptr;
typedef intptr_t GLintptrARB;
typedef ssize_t GLsizeiptr;
typedef ssize_t GLsizeiptrARB;
typedef int64_t GLint64;
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64;
typedef uint64_t GLuint64EXT;

typedef struct __GLsync *GLsync;

typedef void (*GLDEBUGPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *message, const void *userParam);

namespace Arcane {

	void LoadGL();

}

#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_FALSE 0
#define GL_TRUE 1
#define GL_POINTS 0x0000
#define GL_LINES 0x0001
#define GL_LINE_LOOP 0x0002
#define GL_LINE_STRIP 0x0003
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_FAN 0x0006
#define GL_NEVER 0x0200
#define GL_LESS 0x0201
#define GL_EQUAL 0x0202
#define GL_LEQUAL 0x0203
#define GL_GREATER 0x0204
#define GL_NOTEQUAL 0x0205
#define GL_GEQUAL 0x0206
#define GL_ALWAYS 0x0207
#define GL_ZERO 0
#define GL_ONE 1
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_NONE 0
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_FRONT 0x0404
#define GL_BACK 0x0405
#define GL_LEFT 0x0406
#define GL_RIGHT 0x0407
#define GL_FRONT_AND_BACK 0x0408
#define GL_NO_ERROR 0
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_VALUE 0x0501
#define GL_INVALID_OPERATION 0x0502
#define GL_OUT_OF_MEMORY 0x0505
#define GL_CW 0x0900
#define GL_CCW 0x0901
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_FRONT_FACE 0x0B46
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_VIEWPORT 0x0BA2
#define GL_DITHER 0x0BD0
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND 0x0BE2
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_DRAW_BUFFER 0x0C01
#define GL_READ_BUFFER 0x0C02
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_DOUBLEBUFFER 0x0C32
#define GL_STEREO 0x0C33
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_DONT_CARE 0x1100
#define GL_FASTEST 0x1101
#define GL_NICEST 0x1102
#define GL_BYTE 0x1400
#define GL_UNSIGNED_BYTE 0x1401
#define GL_SHORT 0x1402
#define GL_UNSIGNED_SHORT 0x1403
#define GL_INT 0x1404
#define GL_UNSIGNED_INT 0x1405
#define GL_FLOAT 0x1406
#define GL_CLEAR 0x1500
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_COPY 0x1503
#define GL_AND_INVERTED 0x1504
#define GL_NOOP 0x1505
#define GL_XOR 0x1506
#define GL_OR 0x1507
#define GL_NOR 0x1508
#define GL_EQUIV 0x1509
#define GL_INVERT 0x150A
#define GL_OR_REVERSE 0x150B
#define GL_COPY_INVERTED 0x150C
#define GL_OR_INVERTED 0x150D
#define GL_NAND 0x150E
#define GL_SET 0x150F
#define GL_TEXTURE 0x1702
#define GL_COLOR 0x1800
#define GL_DEPTH 0x1801
#define GL_STENCIL 0x1802
#define GL_STENCIL_INDEX 0x1901
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RED 0x1903
#define GL_GREEN 0x1904
#define GL_BLUE 0x1905
#define GL_ALPHA 0x1906
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_POINT 0x1B00
#define GL_LINE 0x1B01
#define GL_FILL 0x1B02
#define GL_KEEP 0x1E00
#define GL_REPLACE 0x1E01
#define GL_INCR 0x1E02
#define GL_DECR 0x1E03
#define GL_VENDOR 0x1F00
#define GL_RENDERER 0x1F01
#define GL_VERSION 0x1F02
#define GL_EXTENSIONS 0x1F03
#define GL_NEAREST 0x2600
#define GL_LINEAR 0x2601
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_REPEAT 0x2901
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_DOUBLE 0x140A
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_R3_G3_B2 0x2A10
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB8 0x8051
#define GL_RGB10 0x8052
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_RGB5_A1 0x8057
#define GL_RGBA8 0x8058
#define GL_RGB10_A2 0x8059
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_TEXTURE_3D 0x806F
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_MULTISAMPLE 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLES 0x80A9
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_INCR_WRAP 0x8507
#define GL_DECR_WRAP 0x8508
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_EQUATION 0x8009
#define GL_CONSTANT_COLOR 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_CONSTANT_ALPHA 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_MIN 0x8007
#define GL_MAX 0x8008
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_CURRENT_QUERY 0x8865
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_ARRAY_BUFFER 0x8892
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_READ_ONLY 0x88B8
#define GL_WRITE_ONLY 0x88B9
#define GL_READ_WRITE 0x88BA
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_COPY 0x88E2
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_COPY 0x88E6
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_COPY 0x88EA
#define GL_SAMPLES_PASSED 0x8914
#define GL_SRC1_ALPHA 0x8589
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_VERTEX_SHADER 0x8B31
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_SHADER_TYPE 0x8B4F
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_BOOL 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_DELETE_STATUS 0x8B80
#define GL_COMPILE_STATUS 0x8B81
#define GL_LINK_STATUS 0x8B82
#define GL_VALIDATE_STATUS 0x8B83
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_LOWER_LEFT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAJOR_VERSION 0x821B
#define GL_MINOR_VERSION 0x821C
#define GL_NUM_EXTENSIONS 0x821D
#define GL_CONTEXT_FLAGS 0x821E
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RG 0x8226
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_RGBA32F 0x8814
#define GL_RGB32F 0x8815
#define GL_RGBA16F 0x881A
#define GL_RGB16F 0x881B
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_FIXED_ONLY 0x891D
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_RGB9_E5 0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_RGBA32UI 0x8D70
#define GL_RGB32UI 0x8D71
#define GL_RGBA16UI 0x8D76
#define GL_RGB16UI 0x8D77
#define GL_RGBA8UI 0x8D7C
#define GL_RGB8UI 0x8D7D
#define GL_RGBA32I 0x8D82
#define GL_RGB32I 0x8D83
#define GL_RGBA16I 0x8D88
#define GL_RGB16I 0x8D89
#define GL_RGBA8I 0x8D8E
#define GL_RGB8I 0x8D8F
#define GL_RED_INTEGER 0x8D94
#define GL_GREEN_INTEGER 0x8D95
#define GL_BLUE_INTEGER 0x8D96
#define GL_RGB_INTEGER 0x8D98
#define GL_RGBA_INTEGER 0x8D99
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGRA_INTEGER 0x8D9B
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_DEPTH_STENCIL 0x84F9
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_FRAMEBUFFER 0x8D40
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX16 0x8D49
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_MAX_SAMPLES 0x8D57
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_HALF_FLOAT 0x140B
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_RG 0x8227
#define GL_RG_INTEGER 0x8228
#define GL_R8 0x8229
#define GL_R16 0x822A
#define GL_RG8 0x822B
#define GL_RG16 0x822C
#define GL_R16F 0x822D
#define GL_R32F 0x822E
#define GL_RG16F 0x822F
#define GL_RG32F 0x8230
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_R8_SNORM 0x8F94
#define GL_RG8_SNORM 0x8F95
#define GL_RGB8_SNORM 0x8F96
#define GL_RGBA8_SNORM 0x8F97
#define GL_R16_SNORM 0x8F98
#define GL_RG16_SNORM 0x8F99
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGBA16_SNORM 0x8F9B
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_DEPTH_CLAMP 0x864F
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_OBJECT_TYPE 0x9112
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_STATUS 0x9114
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_UNSIGNALED 0x9118
#define GL_SIGNALED 0x9119
#define GL_ALREADY_SIGNALED 0x911A
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_CONDITION_SATISFIED 0x911C
#define GL_WAIT_FAILED 0x911D
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_SRC1_COLOR 0x88F9
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_SAMPLER_BINDING 0x8919
#define GL_RGB10_A2UI 0x906F
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIMESTAMP 0x8E28
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_SAMPLE_SHADING 0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_PATCHES 0x000E
#define GL_PATCH_VERTICES 0x8E72
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_ISOLINES 0x8E7A
#define GL_QUADS 0x0007
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_FIXED 0x140C
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_LOW_FLOAT 0x8DF0
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_HIGH_FLOAT 0x8DF2
#define GL_LOW_INT 0x8DF3
#define GL_MEDIUM_INT 0x8DF4
#define GL_HIGH_INT 0x8DF5
#define GL_SHADER_COMPILER 0x8DFA
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_RGB565 0x8D62
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_MAX_VIEWPORTS 0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_COMPUTE_SHADER 0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_BUFFER 0x82E0
#define GL_SHADER 0x82E1
#define GL_PROGRAM 0x82E2
#define GL_VERTEX_ARRAY 0x8074
#define GL_QUERY 0x82E3
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_SAMPLER 0x82E6
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_MAX_WIDTH 0x827E
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_COLOR_COMPONENTS 0x8283
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_COLOR_RENDERABLE 0x8286
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_MIPMAP 0x8293
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_COLOR_ENCODING 0x8296
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_FILTER 0x829A
#define GL_VERTEX_TEXTURE 0x829B
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_CLEAR_BUFFER 0x82B4
#define GL_TEXTURE_VIEW 0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_FULL_SUPPORT 0x82B7
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_NAME_LENGTH 0x92F9
#define GL_TYPE 0x92FA
#define GL_ARRAY_SIZE 0x92FB
#define GL_OFFSET 0x92FC
#define GL_BLOCK_INDEX 0x92FD
#define GL_ARRAY_STRIDE 0x92FE
#define GL_MATRIX_STRIDE 0x92FF
#define GL_IS_ROW_MAJOR 0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_LOCATION 0x930E
#define GL_LOCATION_INDEX 0x930F
#define GL_IS_PER_PATCH 0x92E7
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_DISPLAY_LIST 0x82E7
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STACK_OVERFLOW 0x0503
#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_TEXTURE_BUFFER_BINDING 0x8C2A
#define GL_MAP_PERSISTENT_BIT 0x0040
#define GL_MAP_COHERENT_BIT 0x0080
#define GL_DYNAMIC_STORAGE_BIT 0x0100
#define GL_CLIENT_STORAGE_BIT 0x0200
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#define GL_BUFFER_STORAGE_FLAGS 0x8220
#define GL_CLEAR_TEXTURE 0x9365
#define GL_LOCATION_COMPONENT 0x934A
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#define GL_QUERY_BUFFER 0x9192
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#define GL_QUERY_BUFFER_BINDING 0x9193
#define GL_QUERY_RESULT_NO_WAIT 0x9194
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#define GL_CONTEXT_LOST 0x0507
#define GL_NEGATIVE_ONE_TO_ONE 0x935E
#define GL_ZERO_TO_ONE 0x935F
#define GL_CLIP_ORIGIN 0x935C
#define GL_CLIP_DEPTH_MODE 0x935D
#define GL_QUERY_WAIT_INVERTED 0x8E17
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#define GL_MAX_CULL_DISTANCES 0x82F9
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#define GL_TEXTURE_TARGET 0x1006
#define GL_QUERY_TARGET 0x82EA
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_COLOR_TABLE 0x80D0
#define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1
#define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2
#define GL_PROXY_COLOR_TABLE 0x80D3
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
#define GL_CONVOLUTION_1D 0x8010
#define GL_CONVOLUTION_2D 0x8011
#define GL_SEPARABLE_2D 0x8012
#define GL_HISTOGRAM 0x8024
#define GL_PROXY_HISTOGRAM 0x8025
#define GL_MINMAX 0x802E
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#define GL_SHADER_BINARY_FORMAT_SPIR_V 0x9551
#define GL_SPIR_V_BINARY 0x9552
#define GL_PARAMETER_BUFFER 0x80EE
#define GL_PARAMETER_BUFFER_BINDING 0x80EF
#define GL_CONTEXT_FLAG_NO_ERROR_BIT 0x00000008
#define GL_VERTICES_SUBMITTED 0x82EE
#define GL_PRIMITIVES_SUBMITTED 0x82EF
#define GL_VERTEX_SHADER_INVOCATIONS 0x82F0
#define GL_TESS_CONTROL_SHADER_PATCHES 0x82F1
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS 0x82F2
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED 0x82F3
#define GL_FRAGMENT_SHADER_INVOCATIONS 0x82F4
#define GL_COMPUTE_SHADER_INVOCATIONS 0x82F5
#define GL_CLIPPING_INPUT_PRIMITIVES 0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES 0x82F7
#define GL_POLYGON_OFFSET_CLAMP 0x8E1B
#define GL_SPIR_V_EXTENSIONS 0x9553
#define GL_NUM_SPIR_V_EXTENSIONS 0x9554
#define GL_TEXTURE_MAX_ANISOTROPY 0x84FE
#define GL_MAX_TEXTURE_MAX_ANISOTROPY 0x84FF
#define GL_TRANSFORM_FEEDBACK_OVERFLOW 0x82EC
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW 0x82ED

typedef void (*PFNGLCULLFACEPROC)(GLenum mode);
GLAPI PFNGLCULLFACEPROC ARGLCullFace;
#define glCullFace ARGLCullFace
typedef void (*PFNGLFRONTFACEPROC)(GLenum mode);
GLAPI PFNGLFRONTFACEPROC ARGLFrontFace;
#define glFrontFace ARGLFrontFace
typedef void (*PFNGLHINTPROC)(GLenum target, GLenum mode);
GLAPI PFNGLHINTPROC ARGLHint;
#define glHint ARGLHint
typedef void (*PFNGLLINEWIDTHPROC)(GLfloat width);
GLAPI PFNGLLINEWIDTHPROC ARGLLineWidth;
#define glLineWidth ARGLLineWidth
typedef void (*PFNGLPOINTSIZEPROC)(GLfloat size);
GLAPI PFNGLPOINTSIZEPROC ARGLPointSize;
#define glPointSize ARGLPointSize
typedef void (*PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
GLAPI PFNGLPOLYGONMODEPROC ARGLPolygonMode;
#define glPolygonMode ARGLPolygonMode
typedef void (*PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLSCISSORPROC ARGLScissor;
#define glScissor ARGLScissor
typedef void (*PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
GLAPI PFNGLTEXPARAMETERFPROC ARGLTexParameterf;
#define glTexParameterf ARGLTexParameterf
typedef void (*PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat *params);
GLAPI PFNGLTEXPARAMETERFVPROC ARGLTexParameterfv;
#define glTexParameterfv ARGLTexParameterfv
typedef void (*PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
GLAPI PFNGLTEXPARAMETERIPROC ARGLTexParameteri;
#define glTexParameteri ARGLTexParameteri
typedef void (*PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint *params);
GLAPI PFNGLTEXPARAMETERIVPROC ARGLTexParameteriv;
#define glTexParameteriv ARGLTexParameteriv
typedef void (*PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI PFNGLTEXIMAGE1DPROC ARGLTexImage1D;
#define glTexImage1D ARGLTexImage1D
typedef void (*PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
GLAPI PFNGLTEXIMAGE2DPROC ARGLTexImage2D;
#define glTexImage2D ARGLTexImage2D
typedef void (*PFNGLDRAWBUFFERPROC)(GLenum buf);
GLAPI PFNGLDRAWBUFFERPROC ARGLDrawBuffer;
#define glDrawBuffer ARGLDrawBuffer
typedef void (*PFNGLCLEARPROC)(GLbitfield mask);
GLAPI PFNGLCLEARPROC ARGLClear;
#define glClear ARGLClear
typedef void (*PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI PFNGLCLEARCOLORPROC ARGLClearColor;
#define glClearColor ARGLClearColor
typedef void (*PFNGLCLEARSTENCILPROC)(GLint s);
GLAPI PFNGLCLEARSTENCILPROC ARGLClearStencil;
#define glClearStencil ARGLClearStencil
typedef void (*PFNGLCLEARDEPTHPROC)(GLdouble depth);
GLAPI PFNGLCLEARDEPTHPROC ARGLClearDepth;
#define glClearDepth ARGLClearDepth
typedef void (*PFNGLSTENCILMASKPROC)(GLuint mask);
GLAPI PFNGLSTENCILMASKPROC ARGLStencilMask;
#define glStencilMask ARGLStencilMask
typedef void (*PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
GLAPI PFNGLCOLORMASKPROC ARGLColorMask;
#define glColorMask ARGLColorMask
typedef void (*PFNGLDEPTHMASKPROC)(GLboolean flag);
GLAPI PFNGLDEPTHMASKPROC ARGLDepthMask;
#define glDepthMask ARGLDepthMask
typedef void (*PFNGLDISABLEPROC)(GLenum cap);
GLAPI PFNGLDISABLEPROC ARGLDisable;
#define glDisable ARGLDisable
typedef void (*PFNGLENABLEPROC)(GLenum cap);
GLAPI PFNGLENABLEPROC ARGLEnable;
#define glEnable ARGLEnable
typedef void (*PFNGLFINISHPROC)(void);
GLAPI PFNGLFINISHPROC ARGLFinish;
#define glFinish ARGLFinish
typedef void (*PFNGLFLUSHPROC)(void);
GLAPI PFNGLFLUSHPROC ARGLFlush;
#define glFlush ARGLFlush
typedef void (*PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
GLAPI PFNGLBLENDFUNCPROC ARGLBlendFunc;
#define glBlendFunc ARGLBlendFunc
typedef void (*PFNGLLOGICOPPROC)(GLenum opcode);
GLAPI PFNGLLOGICOPPROC ARGLLogicOp;
#define glLogicOp ARGLLogicOp
typedef void (*PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
GLAPI PFNGLSTENCILFUNCPROC ARGLStencilFunc;
#define glStencilFunc ARGLStencilFunc
typedef void (*PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
GLAPI PFNGLSTENCILOPPROC ARGLStencilOp;
#define glStencilOp ARGLStencilOp
typedef void (*PFNGLDEPTHFUNCPROC)(GLenum func);
GLAPI PFNGLDEPTHFUNCPROC ARGLDepthFunc;
#define glDepthFunc ARGLDepthFunc
typedef void (*PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLPIXELSTOREFPROC ARGLPixelStoref;
#define glPixelStoref ARGLPixelStoref
typedef void (*PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
GLAPI PFNGLPIXELSTOREIPROC ARGLPixelStorei;
#define glPixelStorei ARGLPixelStorei
typedef void (*PFNGLREADBUFFERPROC)(GLenum src);
GLAPI PFNGLREADBUFFERPROC ARGLReadBuffer;
#define glReadBuffer ARGLReadBuffer
typedef void (*PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
GLAPI PFNGLREADPIXELSPROC ARGLReadPixels;
#define glReadPixels ARGLReadPixels
typedef void (*PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean *data);
GLAPI PFNGLGETBOOLEANVPROC ARGLGetBooleanv;
#define glGetBooleanv ARGLGetBooleanv
typedef void (*PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble *data);
GLAPI PFNGLGETDOUBLEVPROC ARGLGetDoublev;
#define glGetDoublev ARGLGetDoublev
typedef GLenum (*PFNGLGETERRORPROC)(void);
GLAPI PFNGLGETERRORPROC ARGLGetError;
#define glGetError ARGLGetError
typedef void (*PFNGLGETFLOATVPROC)(GLenum pname, GLfloat *data);
GLAPI PFNGLGETFLOATVPROC ARGLGetFloatv;
#define glGetFloatv ARGLGetFloatv
typedef void (*PFNGLGETINTEGERVPROC)(GLenum pname, GLint *data);
GLAPI PFNGLGETINTEGERVPROC ARGLGetIntegerv;
#define glGetIntegerv ARGLGetIntegerv
typedef const GLubyte * (*PFNGLGETSTRINGPROC)(GLenum name);
GLAPI PFNGLGETSTRINGPROC ARGLGetString;
#define glGetString ARGLGetString
typedef void (*PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
GLAPI PFNGLGETTEXIMAGEPROC ARGLGetTexImage;
#define glGetTexImage ARGLGetTexImage
typedef void (*PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params);
GLAPI PFNGLGETTEXPARAMETERFVPROC ARGLGetTexParameterfv;
#define glGetTexParameterfv ARGLGetTexParameterfv
typedef void (*PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
GLAPI PFNGLGETTEXPARAMETERIVPROC ARGLGetTexParameteriv;
#define glGetTexParameteriv ARGLGetTexParameteriv
typedef void (*PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat *params);
GLAPI PFNGLGETTEXLEVELPARAMETERFVPROC ARGLGetTexLevelParameterfv;
#define glGetTexLevelParameterfv ARGLGetTexLevelParameterfv
typedef void (*PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint *params);
GLAPI PFNGLGETTEXLEVELPARAMETERIVPROC ARGLGetTexLevelParameteriv;
#define glGetTexLevelParameteriv ARGLGetTexLevelParameteriv
typedef GLboolean (*PFNGLISENABLEDPROC)(GLenum cap);
GLAPI PFNGLISENABLEDPROC ARGLIsEnabled;
#define glIsEnabled ARGLIsEnabled
typedef void (*PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
GLAPI PFNGLDEPTHRANGEPROC ARGLDepthRange;
#define glDepthRange ARGLDepthRange
typedef void (*PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLVIEWPORTPROC ARGLViewport;
#define glViewport ARGLViewport

typedef void (*PFNGLDRAWARRAYSPROC)(uint32_t mode, GLint first, GLsizei count);
GLAPI PFNGLDRAWARRAYSPROC ARGLDrawArrays;
#define glDrawArrays ARGLDrawArrays
typedef void (*PFNGLDRAWELEMENTSPROC)(uint32_t mode, GLsizei count, uint32_t type, const void *indices);
GLAPI PFNGLDRAWELEMENTSPROC ARGLDrawElements;
#define glDrawElements ARGLDrawElements
typedef void (*PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
GLAPI PFNGLPOLYGONOFFSETPROC ARGLPolygonOffset;
#define glPolygonOffset ARGLPolygonOffset
typedef void (*PFNGLCOPYTEXIMAGE1DPROC)(uint32_t target, GLint level, uint32_t internalformat, GLint x, GLint y, GLsizei width, GLint border);
GLAPI PFNGLCOPYTEXIMAGE1DPROC ARGLCopyTexImage1D;
#define glCopyTexImage1D ARGLCopyTexImage1D
typedef void (*PFNGLCOPYTEXIMAGE2DPROC)(uint32_t target, GLint level, uint32_t internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GLAPI PFNGLCOPYTEXIMAGE2DPROC ARGLCopyTexImage2D;
#define glCopyTexImage2D ARGLCopyTexImage2D
typedef void (*PFNGLCOPYTEXSUBIMAGE1DPROC)(uint32_t target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYTEXSUBIMAGE1DPROC ARGLCopyTexSubImage1D;
#define glCopyTexSubImage1D ARGLCopyTexSubImage1D
typedef void (*PFNGLCOPYTEXSUBIMAGE2DPROC)(uint32_t target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXSUBIMAGE2DPROC ARGLCopyTexSubImage2D;
#define glCopyTexSubImage2D ARGLCopyTexSubImage2D
typedef void (*PFNGLTEXSUBIMAGE1DPROC)(uint32_t target, GLint level, GLint xoffset, GLsizei width, uint32_t format, uint32_t type, const void *pixels);
GLAPI PFNGLTEXSUBIMAGE1DPROC ARGLTexSubImage1D;
#define glTexSubImage1D ARGLTexSubImage1D
typedef void (*PFNGLTEXSUBIMAGE2DPROC)(uint32_t target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, uint32_t format, uint32_t type, const void *pixels);
GLAPI PFNGLTEXSUBIMAGE2DPROC ARGLTexSubImage2D;
#define glTexSubImage2D ARGLTexSubImage2D
typedef void (*PFNGLBINDTEXTUREPROC)(uint32_t target, GLuint texture);
GLAPI PFNGLBINDTEXTUREPROC ARGLBindTexture;
#define glBindTexture ARGLBindTexture
typedef void (*PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint *textures);
GLAPI PFNGLDELETETEXTURESPROC ARGLDeleteTextures;
#define glDeleteTextures ARGLDeleteTextures
typedef void (*PFNGLGENTEXTURESPROC)(GLsizei n, GLuint *textures);
GLAPI PFNGLGENTEXTURESPROC ARGLGenTextures;
#define glGenTextures ARGLGenTextures
typedef GLboolean (*PFNGLISTEXTUREPROC)(GLuint texture);
GLAPI PFNGLISTEXTUREPROC ARGLIsTexture;
#define glIsTexture ARGLIsTexture

typedef void (*PFNGLDRAWRANGEELEMENTSPROC)(uint32_t mode, GLuint start, GLuint end, GLsizei count, uint32_t type, const void *indices);
GLAPI PFNGLDRAWRANGEELEMENTSPROC ARGLDrawRangeElements;
#define glDrawRangeElements ARGLDrawRangeElements
typedef void (*PFNGLTEXIMAGE3DPROC)(uint32_t target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, uint32_t format, uint32_t type, const void *pixels);
GLAPI PFNGLTEXIMAGE3DPROC ARGLTexImage3D;
#define glTexImage3D ARGLTexImage3D
typedef void (*PFNGLTEXSUBIMAGE3DPROC)(uint32_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, uint32_t format, uint32_t type, const void *pixels);
GLAPI PFNGLTEXSUBIMAGE3DPROC ARGLTexSubImage3D;
#define glTexSubImage3D ARGLTexSubImage3D
typedef void (*PFNGLCOPYTEXSUBIMAGE3DPROC)(uint32_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXSUBIMAGE3DPROC ARGLCopyTexSubImage3D;
#define glCopyTexSubImage3D ARGLCopyTexSubImage3D

typedef void (*PFNGLACTIVETEXTUREPROC)(uint32_t texture);
GLAPI PFNGLACTIVETEXTUREPROC ARGLActiveTexture;
#define glActiveTexture ARGLActiveTexture
typedef void (*PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
GLAPI PFNGLSAMPLECOVERAGEPROC ARGLSampleCoverage;
#define glSampleCoverage ARGLSampleCoverage
typedef void (*PFNGLCOMPRESSEDTEXIMAGE3DPROC)(uint32_t target, GLint level, uint32_t internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE3DPROC ARGLCompressedTexImage3D;
#define glCompressedTexImage3D ARGLCompressedTexImage3D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE2DPROC)(uint32_t target, GLint level, uint32_t internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE2DPROC ARGLCompressedTexImage2D;
#define glCompressedTexImage2D ARGLCompressedTexImage2D
typedef void (*PFNGLCOMPRESSEDTEXIMAGE1DPROC)(uint32_t target, GLint level, uint32_t internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE1DPROC ARGLCompressedTexImage1D;
#define glCompressedTexImage1D ARGLCompressedTexImage1D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(uint32_t target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, uint32_t format, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC ARGLCompressedTexSubImage3D;
#define glCompressedTexSubImage3D ARGLCompressedTexSubImage3D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(uint32_t target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, uint32_t format, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC ARGLCompressedTexSubImage2D;
#define glCompressedTexSubImage2D ARGLCompressedTexSubImage2D
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(uint32_t target, GLint level, GLint xoffset, GLsizei width, uint32_t format, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC ARGLCompressedTexSubImage1D;
#define glCompressedTexSubImage1D ARGLCompressedTexSubImage1D
typedef void (*PFNGLGETCOMPRESSEDTEXIMAGEPROC)(uint32_t target, GLint level, void *img);
GLAPI PFNGLGETCOMPRESSEDTEXIMAGEPROC ARGLGetCompressedTexImage;
#define glGetCompressedTexImage ARGLGetCompressedTexImage

typedef void (*PFNGLBLENDFUNCSEPARATEPROC)(uint32_t sfactorRGB, uint32_t dfactorRGB, uint32_t sfactorAlpha, uint32_t dfactorAlpha);
GLAPI PFNGLBLENDFUNCSEPARATEPROC ARGLBlendFuncSeparate;
#define glBlendFuncSeparate ARGLBlendFuncSeparate
typedef void (*PFNGLMULTIDRAWARRAYSPROC)(uint32_t mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
GLAPI PFNGLMULTIDRAWARRAYSPROC ARGLMultiDrawArrays;
#define glMultiDrawArrays ARGLMultiDrawArrays
typedef void (*PFNGLMULTIDRAWELEMENTSPROC)(uint32_t mode, const GLsizei *count, uint32_t type, const void *const*indices, GLsizei drawcount);
GLAPI PFNGLMULTIDRAWELEMENTSPROC ARGLMultiDrawElements;
#define glMultiDrawElements ARGLMultiDrawElements
typedef void (*PFNGLPOINTPARAMETERFPROC)(uint32_t pname, GLfloat param);
GLAPI PFNGLPOINTPARAMETERFPROC ARGLPointParameterf;
#define glPointParameterf ARGLPointParameterf
typedef void (*PFNGLPOINTPARAMETERFVPROC)(uint32_t pname, const GLfloat *params);
GLAPI PFNGLPOINTPARAMETERFVPROC ARGLPointParameterfv;
#define glPointParameterfv ARGLPointParameterfv
typedef void (*PFNGLPOINTPARAMETERIPROC)(uint32_t pname, GLint param);
GLAPI PFNGLPOINTPARAMETERIPROC ARGLPointParameteri;
#define glPointParameteri ARGLPointParameteri
typedef void (*PFNGLPOINTPARAMETERIVPROC)(uint32_t pname, const GLint *params);
GLAPI PFNGLPOINTPARAMETERIVPROC ARGLPointParameteriv;
#define glPointParameteriv ARGLPointParameteriv
typedef void (*PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI PFNGLBLENDCOLORPROC ARGLBlendColor;
#define glBlendColor ARGLBlendColor
typedef void (*PFNGLBLENDEQUATIONPROC)(uint32_t mode);
GLAPI PFNGLBLENDEQUATIONPROC ARGLBlendEquation;
#define glBlendEquation ARGLBlendEquation

typedef void (*PFNGLGENQUERIESPROC)(GLsizei n, GLuint *ids);
GLAPI PFNGLGENQUERIESPROC ARGLGenQueries;
#define glGenQueries ARGLGenQueries
typedef void (*PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint *ids);
GLAPI PFNGLDELETEQUERIESPROC ARGLDeleteQueries;
#define glDeleteQueries ARGLDeleteQueries
typedef GLboolean (*PFNGLISQUERYPROC)(GLuint id);
GLAPI PFNGLISQUERYPROC ARGLIsQuery;
#define glIsQuery ARGLIsQuery
typedef void (*PFNGLBEGINQUERYPROC)(uint32_t target, GLuint id);
GLAPI PFNGLBEGINQUERYPROC ARGLBeginQuery;
#define glBeginQuery ARGLBeginQuery
typedef void (*PFNGLENDQUERYPROC)(uint32_t target);
GLAPI PFNGLENDQUERYPROC ARGLEndQuery;
#define glEndQuery ARGLEndQuery
typedef void (*PFNGLGETQUERYIVPROC)(uint32_t target, uint32_t pname, GLint *params);
GLAPI PFNGLGETQUERYIVPROC ARGLGetQueryiv;
#define glGetQueryiv ARGLGetQueryiv
typedef void (*PFNGLGETQUERYOBJECTIVPROC)(GLuint id, uint32_t pname, GLint *params);
GLAPI PFNGLGETQUERYOBJECTIVPROC ARGLGetQueryObjectiv;
#define glGetQueryObjectiv ARGLGetQueryObjectiv
typedef void (*PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, uint32_t pname, GLuint *params);
GLAPI PFNGLGETQUERYOBJECTUIVPROC ARGLGetQueryObjectuiv;
#define glGetQueryObjectuiv ARGLGetQueryObjectuiv
typedef void (*PFNGLBINDBUFFERPROC)(uint32_t target, GLuint buffer);
GLAPI PFNGLBINDBUFFERPROC ARGLBindBuffer;
#define glBindBuffer ARGLBindBuffer
typedef void (*PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint *buffers);
GLAPI PFNGLDELETEBUFFERSPROC ARGLDeleteBuffers;
#define glDeleteBuffers ARGLDeleteBuffers
typedef void (*PFNGLGENBUFFERSPROC)(GLsizei n, GLuint *buffers);
GLAPI PFNGLGENBUFFERSPROC ARGLGenBuffers;
#define glGenBuffers ARGLGenBuffers
typedef GLboolean (*PFNGLISBUFFERPROC)(GLuint buffer);
GLAPI PFNGLISBUFFERPROC ARGLIsBuffer;
#define glIsBuffer ARGLIsBuffer
typedef void (*PFNGLBUFFERDATAPROC)(uint32_t target, GLsizeiptr size, const void *data, uint32_t usage);
GLAPI PFNGLBUFFERDATAPROC ARGLBufferData;
#define glBufferData ARGLBufferData
typedef void (*PFNGLBUFFERSUBDATAPROC)(uint32_t target, GLintptr offset, GLsizeiptr size, const void *data);
GLAPI PFNGLBUFFERSUBDATAPROC ARGLBufferSubData;
#define glBufferSubData ARGLBufferSubData
typedef void (*PFNGLGETBUFFERSUBDATAPROC)(uint32_t target, GLintptr offset, GLsizeiptr size, void *data);
GLAPI PFNGLGETBUFFERSUBDATAPROC ARGLGetBufferSubData;
#define glGetBufferSubData ARGLGetBufferSubData
typedef void * (*PFNGLMAPBUFFERPROC)(uint32_t target, uint32_t access);
GLAPI PFNGLMAPBUFFERPROC ARGLMapBuffer;
#define glMapBuffer ARGLMapBuffer
typedef GLboolean (*PFNGLUNMAPBUFFERPROC)(uint32_t target);
GLAPI PFNGLUNMAPBUFFERPROC ARGLUnmapBuffer;
#define glUnmapBuffer ARGLUnmapBuffer
typedef void (*PFNGLGETBUFFERPARAMETERIVPROC)(uint32_t target, uint32_t pname, GLint *params);
GLAPI PFNGLGETBUFFERPARAMETERIVPROC ARGLGetBufferParameteriv;
#define glGetBufferParameteriv ARGLGetBufferParameteriv
typedef void (*PFNGLGETBUFFERPOINTERVPROC)(uint32_t target, uint32_t pname, void **params);
GLAPI PFNGLGETBUFFERPOINTERVPROC ARGLGetBufferPointerv;
#define glGetBufferPointerv ARGLGetBufferPointerv

typedef void (*PFNGLBLENDEQUATIONSEPARATEPROC)(uint32_t modeRGB, uint32_t modeAlpha);
GLAPI PFNGLBLENDEQUATIONSEPARATEPROC ARGLBlendEquationSeparate;
#define glBlendEquationSeparate ARGLBlendEquationSeparate
typedef void (*PFNGLDRAWBUFFERSPROC)(GLsizei n, const uint32_t *bufs);
GLAPI PFNGLDRAWBUFFERSPROC ARGLDrawBuffers;
#define glDrawBuffers ARGLDrawBuffers
typedef void (*PFNGLSTENCILOPSEPARATEPROC)(uint32_t face, uint32_t sfail, uint32_t dpfail, uint32_t dppass);
GLAPI PFNGLSTENCILOPSEPARATEPROC ARGLStencilOpSeparate;
#define glStencilOpSeparate ARGLStencilOpSeparate
typedef void (*PFNGLSTENCILFUNCSEPARATEPROC)(uint32_t face, uint32_t func, GLint ref, GLuint mask);
GLAPI PFNGLSTENCILFUNCSEPARATEPROC ARGLStencilFuncSeparate;
#define glStencilFuncSeparate ARGLStencilFuncSeparate
typedef void (*PFNGLSTENCILMASKSEPARATEPROC)(uint32_t face, GLuint mask);
GLAPI PFNGLSTENCILMASKSEPARATEPROC ARGLStencilMaskSeparate;
#define glStencilMaskSeparate ARGLStencilMaskSeparate
typedef void (*PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
GLAPI PFNGLATTACHSHADERPROC ARGLAttachShader;
#define glAttachShader ARGLAttachShader
typedef void (*PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar *name);
GLAPI PFNGLBINDATTRIBLOCATIONPROC ARGLBindAttribLocation;
#define glBindAttribLocation ARGLBindAttribLocation
typedef void (*PFNGLCOMPILESHADERPROC)(GLuint shader);
GLAPI PFNGLCOMPILESHADERPROC ARGLCompileShader;
#define glCompileShader ARGLCompileShader
typedef GLuint (*PFNGLCREATEPROGRAMPROC)(void);
GLAPI PFNGLCREATEPROGRAMPROC ARGLCreateProgram;
#define glCreateProgram ARGLCreateProgram
typedef GLuint (*PFNGLCREATESHADERPROC)(uint32_t type);
GLAPI PFNGLCREATESHADERPROC ARGLCreateShader;
#define glCreateShader ARGLCreateShader
typedef void (*PFNGLDELETEPROGRAMPROC)(GLuint program);
GLAPI PFNGLDELETEPROGRAMPROC ARGLDeleteProgram;
#define glDeleteProgram ARGLDeleteProgram
typedef void (*PFNGLDELETESHADERPROC)(GLuint shader);
GLAPI PFNGLDELETESHADERPROC ARGLDeleteShader;
#define glDeleteShader ARGLDeleteShader
typedef void (*PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
GLAPI PFNGLDETACHSHADERPROC ARGLDetachShader;
#define glDetachShader ARGLDetachShader
typedef void (*PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
GLAPI PFNGLDISABLEVERTEXATTRIBARRAYPROC ARGLDisableVertexAttribArray;
#define glDisableVertexAttribArray ARGLDisableVertexAttribArray
typedef void (*PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
GLAPI PFNGLENABLEVERTEXATTRIBARRAYPROC ARGLEnableVertexAttribArray;
#define glEnableVertexAttribArray ARGLEnableVertexAttribArray
typedef void (*PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, uint32_t *type, GLchar *name);
GLAPI PFNGLGETACTIVEATTRIBPROC ARGLGetActiveAttrib;
#define glGetActiveAttrib ARGLGetActiveAttrib
typedef void (*PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, uint32_t *type, GLchar *name);
GLAPI PFNGLGETACTIVEUNIFORMPROC ARGLGetActiveUniform;
#define glGetActiveUniform ARGLGetActiveUniform
typedef void (*PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
GLAPI PFNGLGETATTACHEDSHADERSPROC ARGLGetAttachedShaders;
#define glGetAttachedShaders ARGLGetAttachedShaders
typedef GLint (*PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar *name);
GLAPI PFNGLGETATTRIBLOCATIONPROC ARGLGetAttribLocation;
#define glGetAttribLocation ARGLGetAttribLocation
typedef void (*PFNGLGETPROGRAMIVPROC)(GLuint program, uint32_t pname, GLint *params);
GLAPI PFNGLGETPROGRAMIVPROC ARGLGetProgramiv;
#define glGetProgramiv ARGLGetProgramiv
typedef void (*PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLAPI PFNGLGETPROGRAMINFOLOGPROC ARGLGetProgramInfoLog;
#define glGetProgramInfoLog ARGLGetProgramInfoLog
typedef void (*PFNGLGETSHADERIVPROC)(GLuint shader, uint32_t pname, GLint *params);
GLAPI PFNGLGETSHADERIVPROC ARGLGetShaderiv;
#define glGetShaderiv ARGLGetShaderiv
typedef void (*PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLAPI PFNGLGETSHADERINFOLOGPROC ARGLGetShaderInfoLog;
#define glGetShaderInfoLog ARGLGetShaderInfoLog
typedef void (*PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
GLAPI PFNGLGETSHADERSOURCEPROC ARGLGetShaderSource;
#define glGetShaderSource ARGLGetShaderSource
typedef GLint (*PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar *name);
GLAPI PFNGLGETUNIFORMLOCATIONPROC ARGLGetUniformLocation;
#define glGetUniformLocation ARGLGetUniformLocation
typedef void (*PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat *params);
GLAPI PFNGLGETUNIFORMFVPROC ARGLGetUniformfv;
#define glGetUniformfv ARGLGetUniformfv
typedef void (*PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint *params);
GLAPI PFNGLGETUNIFORMIVPROC ARGLGetUniformiv;
#define glGetUniformiv ARGLGetUniformiv
typedef void (*PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, uint32_t pname, GLdouble *params);
GLAPI PFNGLGETVERTEXATTRIBDVPROC ARGLGetVertexAttribdv;
#define glGetVertexAttribdv ARGLGetVertexAttribdv
typedef void (*PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, uint32_t pname, GLfloat *params);
GLAPI PFNGLGETVERTEXATTRIBFVPROC ARGLGetVertexAttribfv;
#define glGetVertexAttribfv ARGLGetVertexAttribfv
typedef void (*PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, uint32_t pname, GLint *params);
GLAPI PFNGLGETVERTEXATTRIBIVPROC ARGLGetVertexAttribiv;
#define glGetVertexAttribiv ARGLGetVertexAttribiv
typedef void (*PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, uint32_t pname, void **pointer);
GLAPI PFNGLGETVERTEXATTRIBPOINTERVPROC ARGLGetVertexAttribPointerv;
#define glGetVertexAttribPointerv ARGLGetVertexAttribPointerv
typedef GLboolean (*PFNGLISPROGRAMPROC)(GLuint program);
GLAPI PFNGLISPROGRAMPROC ARGLIsProgram;
#define glIsProgram ARGLIsProgram
typedef GLboolean (*PFNGLISSHADERPROC)(GLuint shader);
GLAPI PFNGLISSHADERPROC ARGLIsShader;
#define glIsShader ARGLIsShader
typedef void (*PFNGLLINKPROGRAMPROC)(GLuint program);
GLAPI PFNGLLINKPROGRAMPROC ARGLLinkProgram;
#define glLinkProgram ARGLLinkProgram
typedef void (*PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
GLAPI PFNGLSHADERSOURCEPROC ARGLShaderSource;
#define glShaderSource ARGLShaderSource
typedef void (*PFNGLUSEPROGRAMPROC)(GLuint program);
GLAPI PFNGLUSEPROGRAMPROC ARGLUseProgram;
#define glUseProgram ARGLUseProgram
typedef void (*PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
GLAPI PFNGLUNIFORM1FPROC ARGLUniform1f;
#define glUniform1f ARGLUniform1f
typedef void (*PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
GLAPI PFNGLUNIFORM2FPROC ARGLUniform2f;
#define glUniform2f ARGLUniform2f
typedef void (*PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI PFNGLUNIFORM3FPROC ARGLUniform3f;
#define glUniform3f ARGLUniform3f
typedef void (*PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI PFNGLUNIFORM4FPROC ARGLUniform4f;
#define glUniform4f ARGLUniform4f
typedef void (*PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
GLAPI PFNGLUNIFORM1IPROC ARGLUniform1i;
#define glUniform1i ARGLUniform1i
typedef void (*PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
GLAPI PFNGLUNIFORM2IPROC ARGLUniform2i;
#define glUniform2i ARGLUniform2i
typedef void (*PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
GLAPI PFNGLUNIFORM3IPROC ARGLUniform3i;
#define glUniform3i ARGLUniform3i
typedef void (*PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI PFNGLUNIFORM4IPROC ARGLUniform4i;
#define glUniform4i ARGLUniform4i
typedef void (*PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLUNIFORM1FVPROC ARGLUniform1fv;
#define glUniform1fv ARGLUniform1fv
typedef void (*PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLUNIFORM2FVPROC ARGLUniform2fv;
#define glUniform2fv ARGLUniform2fv
typedef void (*PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLUNIFORM3FVPROC ARGLUniform3fv;
#define glUniform3fv ARGLUniform3fv
typedef void (*PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLUNIFORM4FVPROC ARGLUniform4fv;
#define glUniform4fv ARGLUniform4fv
typedef void (*PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLUNIFORM1IVPROC ARGLUniform1iv;
#define glUniform1iv ARGLUniform1iv
typedef void (*PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLUNIFORM2IVPROC ARGLUniform2iv;
#define glUniform2iv ARGLUniform2iv
typedef void (*PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLUNIFORM3IVPROC ARGLUniform3iv;
#define glUniform3iv ARGLUniform3iv
typedef void (*PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLUNIFORM4IVPROC ARGLUniform4iv;
#define glUniform4iv ARGLUniform4iv
typedef void (*PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX2FVPROC ARGLUniformMatrix2fv;
#define glUniformMatrix2fv ARGLUniformMatrix2fv
typedef void (*PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX3FVPROC ARGLUniformMatrix3fv;
#define glUniformMatrix3fv ARGLUniformMatrix3fv
typedef void (*PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX4FVPROC ARGLUniformMatrix4fv;
#define glUniformMatrix4fv ARGLUniformMatrix4fv
typedef void (*PFNGLVALIDATEPROGRAMPROC)(GLuint program);
GLAPI PFNGLVALIDATEPROGRAMPROC ARGLValidateProgram;
#define glValidateProgram ARGLValidateProgram
typedef void (*PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
GLAPI PFNGLVERTEXATTRIB1DPROC ARGLVertexAttrib1d;
#define glVertexAttrib1d ARGLVertexAttrib1d
typedef void (*PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIB1DVPROC ARGLVertexAttrib1dv;
#define glVertexAttrib1dv ARGLVertexAttrib1dv
typedef void (*PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
GLAPI PFNGLVERTEXATTRIB1FPROC ARGLVertexAttrib1f;
#define glVertexAttrib1f ARGLVertexAttrib1f
typedef void (*PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat *v);
GLAPI PFNGLVERTEXATTRIB1FVPROC ARGLVertexAttrib1fv;
#define glVertexAttrib1fv ARGLVertexAttrib1fv
typedef void (*PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
GLAPI PFNGLVERTEXATTRIB1SPROC ARGLVertexAttrib1s;
#define glVertexAttrib1s ARGLVertexAttrib1s
typedef void (*PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIB1SVPROC ARGLVertexAttrib1sv;
#define glVertexAttrib1sv ARGLVertexAttrib1sv
typedef void (*PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
GLAPI PFNGLVERTEXATTRIB2DPROC ARGLVertexAttrib2d;
#define glVertexAttrib2d ARGLVertexAttrib2d
typedef void (*PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIB2DVPROC ARGLVertexAttrib2dv;
#define glVertexAttrib2dv ARGLVertexAttrib2dv
typedef void (*PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
GLAPI PFNGLVERTEXATTRIB2FPROC ARGLVertexAttrib2f;
#define glVertexAttrib2f ARGLVertexAttrib2f
typedef void (*PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat *v);
GLAPI PFNGLVERTEXATTRIB2FVPROC ARGLVertexAttrib2fv;
#define glVertexAttrib2fv ARGLVertexAttrib2fv
typedef void (*PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
GLAPI PFNGLVERTEXATTRIB2SPROC ARGLVertexAttrib2s;
#define glVertexAttrib2s ARGLVertexAttrib2s
typedef void (*PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIB2SVPROC ARGLVertexAttrib2sv;
#define glVertexAttrib2sv ARGLVertexAttrib2sv
typedef void (*PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLVERTEXATTRIB3DPROC ARGLVertexAttrib3d;
#define glVertexAttrib3d ARGLVertexAttrib3d
typedef void (*PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIB3DVPROC ARGLVertexAttrib3dv;
#define glVertexAttrib3dv ARGLVertexAttrib3dv
typedef void (*PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLVERTEXATTRIB3FPROC ARGLVertexAttrib3f;
#define glVertexAttrib3f ARGLVertexAttrib3f
typedef void (*PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat *v);
GLAPI PFNGLVERTEXATTRIB3FVPROC ARGLVertexAttrib3fv;
#define glVertexAttrib3fv ARGLVertexAttrib3fv
typedef void (*PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
GLAPI PFNGLVERTEXATTRIB3SPROC ARGLVertexAttrib3s;
#define glVertexAttrib3s ARGLVertexAttrib3s
typedef void (*PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIB3SVPROC ARGLVertexAttrib3sv;
#define glVertexAttrib3sv ARGLVertexAttrib3sv
typedef void (*PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte *v);
GLAPI PFNGLVERTEXATTRIB4NBVPROC ARGLVertexAttrib4Nbv;
#define glVertexAttrib4Nbv ARGLVertexAttrib4Nbv
typedef void (*PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIB4NIVPROC ARGLVertexAttrib4Niv;
#define glVertexAttrib4Niv ARGLVertexAttrib4Niv
typedef void (*PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIB4NSVPROC ARGLVertexAttrib4Nsv;
#define glVertexAttrib4Nsv ARGLVertexAttrib4Nsv
typedef void (*PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
GLAPI PFNGLVERTEXATTRIB4NUBPROC ARGLVertexAttrib4Nub;
#define glVertexAttrib4Nub ARGLVertexAttrib4Nub
typedef void (*PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte *v);
GLAPI PFNGLVERTEXATTRIB4NUBVPROC ARGLVertexAttrib4Nubv;
#define glVertexAttrib4Nubv ARGLVertexAttrib4Nubv
typedef void (*PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIB4NUIVPROC ARGLVertexAttrib4Nuiv;
#define glVertexAttrib4Nuiv ARGLVertexAttrib4Nuiv
typedef void (*PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort *v);
GLAPI PFNGLVERTEXATTRIB4NUSVPROC ARGLVertexAttrib4Nusv;
#define glVertexAttrib4Nusv ARGLVertexAttrib4Nusv
typedef void (*PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte *v);
GLAPI PFNGLVERTEXATTRIB4BVPROC ARGLVertexAttrib4bv;
#define glVertexAttrib4bv ARGLVertexAttrib4bv
typedef void (*PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLVERTEXATTRIB4DPROC ARGLVertexAttrib4d;
#define glVertexAttrib4d ARGLVertexAttrib4d
typedef void (*PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIB4DVPROC ARGLVertexAttrib4dv;
#define glVertexAttrib4dv ARGLVertexAttrib4dv
typedef void (*PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLVERTEXATTRIB4FPROC ARGLVertexAttrib4f;
#define glVertexAttrib4f ARGLVertexAttrib4f
typedef void (*PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat *v);
GLAPI PFNGLVERTEXATTRIB4FVPROC ARGLVertexAttrib4fv;
#define glVertexAttrib4fv ARGLVertexAttrib4fv
typedef void (*PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIB4IVPROC ARGLVertexAttrib4iv;
#define glVertexAttrib4iv ARGLVertexAttrib4iv
typedef void (*PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
GLAPI PFNGLVERTEXATTRIB4SPROC ARGLVertexAttrib4s;
#define glVertexAttrib4s ARGLVertexAttrib4s
typedef void (*PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIB4SVPROC ARGLVertexAttrib4sv;
#define glVertexAttrib4sv ARGLVertexAttrib4sv
typedef void (*PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte *v);
GLAPI PFNGLVERTEXATTRIB4UBVPROC ARGLVertexAttrib4ubv;
#define glVertexAttrib4ubv ARGLVertexAttrib4ubv
typedef void (*PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIB4UIVPROC ARGLVertexAttrib4uiv;
#define glVertexAttrib4uiv ARGLVertexAttrib4uiv
typedef void (*PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort *v);
GLAPI PFNGLVERTEXATTRIB4USVPROC ARGLVertexAttrib4usv;
#define glVertexAttrib4usv ARGLVertexAttrib4usv
typedef void (*PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, uint32_t type, GLboolean normalized, GLsizei stride, const void *pointer);
GLAPI PFNGLVERTEXATTRIBPOINTERPROC ARGLVertexAttribPointer;
#define glVertexAttribPointer ARGLVertexAttribPointer

typedef void (*PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX2X3FVPROC ARGLUniformMatrix2x3fv;
#define glUniformMatrix2x3fv ARGLUniformMatrix2x3fv
typedef void (*PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX3X2FVPROC ARGLUniformMatrix3x2fv;
#define glUniformMatrix3x2fv ARGLUniformMatrix3x2fv
typedef void (*PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX2X4FVPROC ARGLUniformMatrix2x4fv;
#define glUniformMatrix2x4fv ARGLUniformMatrix2x4fv
typedef void (*PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX4X2FVPROC ARGLUniformMatrix4x2fv;
#define glUniformMatrix4x2fv ARGLUniformMatrix4x2fv
typedef void (*PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX3X4FVPROC ARGLUniformMatrix3x4fv;
#define glUniformMatrix3x4fv ARGLUniformMatrix3x4fv
typedef void (*PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLUNIFORMMATRIX4X3FVPROC ARGLUniformMatrix4x3fv;
#define glUniformMatrix4x3fv ARGLUniformMatrix4x3fv

typedef void (*PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
GLAPI PFNGLCOLORMASKIPROC ARGLColorMaski;
#define glColorMaski ARGLColorMaski
typedef void (*PFNGLGETBOOLEANI_VPROC)(uint32_t target, GLuint index, GLboolean *data);
GLAPI PFNGLGETBOOLEANI_VPROC ARGLGetBooleani_v;
#define glGetBooleani_v ARGLGetBooleani_v
typedef void (*PFNGLGETINTEGERI_VPROC)(uint32_t target, GLuint index, GLint *data);
GLAPI PFNGLGETINTEGERI_VPROC ARGLGetIntegeri_v;
#define glGetIntegeri_v ARGLGetIntegeri_v
typedef void (*PFNGLENABLEIPROC)(uint32_t target, GLuint index);
GLAPI PFNGLENABLEIPROC ARGLEnablei;
#define glEnablei ARGLEnablei
typedef void (*PFNGLDISABLEIPROC)(uint32_t target, GLuint index);
GLAPI PFNGLDISABLEIPROC ARGLDisablei;
#define glDisablei ARGLDisablei
typedef GLboolean (*PFNGLISENABLEDIPROC)(uint32_t target, GLuint index);
GLAPI PFNGLISENABLEDIPROC ARGLIsEnabledi;
#define glIsEnabledi ARGLIsEnabledi
typedef void (*PFNGLBEGINTRANSFORMFEEDBACKPROC)(uint32_t primitiveMode);
GLAPI PFNGLBEGINTRANSFORMFEEDBACKPROC ARGLBeginTransformFeedback;
#define glBeginTransformFeedback ARGLBeginTransformFeedback
typedef void (*PFNGLENDTRANSFORMFEEDBACKPROC)(void);
GLAPI PFNGLENDTRANSFORMFEEDBACKPROC ARGLEndTransformFeedback;
#define glEndTransformFeedback ARGLEndTransformFeedback
typedef void (*PFNGLBINDBUFFERRANGEPROC)(uint32_t target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLBINDBUFFERRANGEPROC ARGLBindBufferRange;
#define glBindBufferRange ARGLBindBufferRange
typedef void (*PFNGLBINDBUFFERBASEPROC)(uint32_t target, GLuint index, GLuint buffer);
GLAPI PFNGLBINDBUFFERBASEPROC ARGLBindBufferBase;
#define glBindBufferBase ARGLBindBufferBase
typedef void (*PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar *const*varyings, uint32_t bufferMode);
GLAPI PFNGLTRANSFORMFEEDBACKVARYINGSPROC ARGLTransformFeedbackVaryings;
#define glTransformFeedbackVaryings ARGLTransformFeedbackVaryings
typedef void (*PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, uint32_t *type, GLchar *name);
GLAPI PFNGLGETTRANSFORMFEEDBACKVARYINGPROC ARGLGetTransformFeedbackVarying;
#define glGetTransformFeedbackVarying ARGLGetTransformFeedbackVarying
typedef void (*PFNGLCLAMPCOLORPROC)(uint32_t target, uint32_t clamp);
GLAPI PFNGLCLAMPCOLORPROC ARGLClampColor;
#define glClampColor ARGLClampColor
typedef void (*PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, uint32_t mode);
GLAPI PFNGLBEGINCONDITIONALRENDERPROC ARGLBeginConditionalRender;
#define glBeginConditionalRender ARGLBeginConditionalRender
typedef void (*PFNGLENDCONDITIONALRENDERPROC)(void);
GLAPI PFNGLENDCONDITIONALRENDERPROC ARGLEndConditionalRender;
#define glEndConditionalRender ARGLEndConditionalRender
typedef void (*PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, uint32_t type, GLsizei stride, const void *pointer);
GLAPI PFNGLVERTEXATTRIBIPOINTERPROC ARGLVertexAttribIPointer;
#define glVertexAttribIPointer ARGLVertexAttribIPointer
typedef void (*PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, uint32_t pname, GLint *params);
GLAPI PFNGLGETVERTEXATTRIBIIVPROC ARGLGetVertexAttribIiv;
#define glGetVertexAttribIiv ARGLGetVertexAttribIiv
typedef void (*PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, uint32_t pname, GLuint *params);
GLAPI PFNGLGETVERTEXATTRIBIUIVPROC ARGLGetVertexAttribIuiv;
#define glGetVertexAttribIuiv ARGLGetVertexAttribIuiv
typedef void (*PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
GLAPI PFNGLVERTEXATTRIBI1IPROC ARGLVertexAttribI1i;
#define glVertexAttribI1i ARGLVertexAttribI1i
typedef void (*PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
GLAPI PFNGLVERTEXATTRIBI2IPROC ARGLVertexAttribI2i;
#define glVertexAttribI2i ARGLVertexAttribI2i
typedef void (*PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
GLAPI PFNGLVERTEXATTRIBI3IPROC ARGLVertexAttribI3i;
#define glVertexAttribI3i ARGLVertexAttribI3i
typedef void (*PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
GLAPI PFNGLVERTEXATTRIBI4IPROC ARGLVertexAttribI4i;
#define glVertexAttribI4i ARGLVertexAttribI4i
typedef void (*PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
GLAPI PFNGLVERTEXATTRIBI1UIPROC ARGLVertexAttribI1ui;
#define glVertexAttribI1ui ARGLVertexAttribI1ui
typedef void (*PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
GLAPI PFNGLVERTEXATTRIBI2UIPROC ARGLVertexAttribI2ui;
#define glVertexAttribI2ui ARGLVertexAttribI2ui
typedef void (*PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
GLAPI PFNGLVERTEXATTRIBI3UIPROC ARGLVertexAttribI3ui;
#define glVertexAttribI3ui ARGLVertexAttribI3ui
typedef void (*PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
GLAPI PFNGLVERTEXATTRIBI4UIPROC ARGLVertexAttribI4ui;
#define glVertexAttribI4ui ARGLVertexAttribI4ui
typedef void (*PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIBI1IVPROC ARGLVertexAttribI1iv;
#define glVertexAttribI1iv ARGLVertexAttribI1iv
typedef void (*PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIBI2IVPROC ARGLVertexAttribI2iv;
#define glVertexAttribI2iv ARGLVertexAttribI2iv
typedef void (*PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIBI3IVPROC ARGLVertexAttribI3iv;
#define glVertexAttribI3iv ARGLVertexAttribI3iv
typedef void (*PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLVERTEXATTRIBI4IVPROC ARGLVertexAttribI4iv;
#define glVertexAttribI4iv ARGLVertexAttribI4iv
typedef void (*PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIBI1UIVPROC ARGLVertexAttribI1uiv;
#define glVertexAttribI1uiv ARGLVertexAttribI1uiv
typedef void (*PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIBI2UIVPROC ARGLVertexAttribI2uiv;
#define glVertexAttribI2uiv ARGLVertexAttribI2uiv
typedef void (*PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIBI3UIVPROC ARGLVertexAttribI3uiv;
#define glVertexAttribI3uiv ARGLVertexAttribI3uiv
typedef void (*PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint *v);
GLAPI PFNGLVERTEXATTRIBI4UIVPROC ARGLVertexAttribI4uiv;
#define glVertexAttribI4uiv ARGLVertexAttribI4uiv
typedef void (*PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte *v);
GLAPI PFNGLVERTEXATTRIBI4BVPROC ARGLVertexAttribI4bv;
#define glVertexAttribI4bv ARGLVertexAttribI4bv
typedef void (*PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort *v);
GLAPI PFNGLVERTEXATTRIBI4SVPROC ARGLVertexAttribI4sv;
#define glVertexAttribI4sv ARGLVertexAttribI4sv
typedef void (*PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte *v);
GLAPI PFNGLVERTEXATTRIBI4UBVPROC ARGLVertexAttribI4ubv;
#define glVertexAttribI4ubv ARGLVertexAttribI4ubv
typedef void (*PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort *v);
GLAPI PFNGLVERTEXATTRIBI4USVPROC ARGLVertexAttribI4usv;
#define glVertexAttribI4usv ARGLVertexAttribI4usv
typedef void (*PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint *params);
GLAPI PFNGLGETUNIFORMUIVPROC ARGLGetUniformuiv;
#define glGetUniformuiv ARGLGetUniformuiv
typedef void (*PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar *name);
GLAPI PFNGLBINDFRAGDATALOCATIONPROC ARGLBindFragDataLocation;
#define glBindFragDataLocation ARGLBindFragDataLocation
typedef GLint (*PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar *name);
GLAPI PFNGLGETFRAGDATALOCATIONPROC ARGLGetFragDataLocation;
#define glGetFragDataLocation ARGLGetFragDataLocation
typedef void (*PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
GLAPI PFNGLUNIFORM1UIPROC ARGLUniform1ui;
#define glUniform1ui ARGLUniform1ui
typedef void (*PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
GLAPI PFNGLUNIFORM2UIPROC ARGLUniform2ui;
#define glUniform2ui ARGLUniform2ui
typedef void (*PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
GLAPI PFNGLUNIFORM3UIPROC ARGLUniform3ui;
#define glUniform3ui ARGLUniform3ui
typedef void (*PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLAPI PFNGLUNIFORM4UIPROC ARGLUniform4ui;
#define glUniform4ui ARGLUniform4ui
typedef void (*PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLUNIFORM1UIVPROC ARGLUniform1uiv;
#define glUniform1uiv ARGLUniform1uiv
typedef void (*PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLUNIFORM2UIVPROC ARGLUniform2uiv;
#define glUniform2uiv ARGLUniform2uiv
typedef void (*PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLUNIFORM3UIVPROC ARGLUniform3uiv;
#define glUniform3uiv ARGLUniform3uiv
typedef void (*PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLUNIFORM4UIVPROC ARGLUniform4uiv;
#define glUniform4uiv ARGLUniform4uiv
typedef void (*PFNGLTEXPARAMETERIIVPROC)(uint32_t target, uint32_t pname, const GLint *params);
GLAPI PFNGLTEXPARAMETERIIVPROC ARGLTexParameterIiv;
#define glTexParameterIiv ARGLTexParameterIiv
typedef void (*PFNGLTEXPARAMETERIUIVPROC)(uint32_t target, uint32_t pname, const GLuint *params);
GLAPI PFNGLTEXPARAMETERIUIVPROC ARGLTexParameterIuiv;
#define glTexParameterIuiv ARGLTexParameterIuiv
typedef void (*PFNGLGETTEXPARAMETERIIVPROC)(uint32_t target, uint32_t pname, GLint *params);
GLAPI PFNGLGETTEXPARAMETERIIVPROC ARGLGetTexParameterIiv;
#define glGetTexParameterIiv ARGLGetTexParameterIiv
typedef void (*PFNGLGETTEXPARAMETERIUIVPROC)(uint32_t target, uint32_t pname, GLuint *params);
GLAPI PFNGLGETTEXPARAMETERIUIVPROC ARGLGetTexParameterIuiv;
#define glGetTexParameterIuiv ARGLGetTexParameterIuiv
typedef void (*PFNGLCLEARBUFFERIVPROC)(uint32_t buffer, GLint drawbuffer, const GLint *value);
GLAPI PFNGLCLEARBUFFERIVPROC ARGLClearBufferiv;
#define glClearBufferiv ARGLClearBufferiv
typedef void (*PFNGLCLEARBUFFERUIVPROC)(uint32_t buffer, GLint drawbuffer, const GLuint *value);
GLAPI PFNGLCLEARBUFFERUIVPROC ARGLClearBufferuiv;
#define glClearBufferuiv ARGLClearBufferuiv
typedef void (*PFNGLCLEARBUFFERFVPROC)(uint32_t buffer, GLint drawbuffer, const GLfloat *value);
GLAPI PFNGLCLEARBUFFERFVPROC ARGLClearBufferfv;
#define glClearBufferfv ARGLClearBufferfv
typedef void (*PFNGLCLEARBUFFERFIPROC)(uint32_t buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
GLAPI PFNGLCLEARBUFFERFIPROC ARGLClearBufferfi;
#define glClearBufferfi ARGLClearBufferfi
typedef const GLubyte * (*PFNGLGETSTRINGIPROC)(uint32_t name, GLuint index);
GLAPI PFNGLGETSTRINGIPROC ARGLGetStringi;
#define glGetStringi ARGLGetStringi
typedef GLboolean (*PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
GLAPI PFNGLISRENDERBUFFERPROC ARGLIsRenderbuffer;
#define glIsRenderbuffer ARGLIsRenderbuffer
typedef void (*PFNGLBINDRENDERBUFFERPROC)(uint32_t target, GLuint renderbuffer);
GLAPI PFNGLBINDRENDERBUFFERPROC ARGLBindRenderbuffer;
#define glBindRenderbuffer ARGLBindRenderbuffer
typedef void (*PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint *renderbuffers);
GLAPI PFNGLDELETERENDERBUFFERSPROC ARGLDeleteRenderbuffers;
#define glDeleteRenderbuffers ARGLDeleteRenderbuffers
typedef void (*PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint *renderbuffers);
GLAPI PFNGLGENRENDERBUFFERSPROC ARGLGenRenderbuffers;
#define glGenRenderbuffers ARGLGenRenderbuffers
typedef void (*PFNGLRENDERBUFFERSTORAGEPROC)(uint32_t target, uint32_t internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLRENDERBUFFERSTORAGEPROC ARGLRenderbufferStorage;
#define glRenderbufferStorage ARGLRenderbufferStorage
typedef void (*PFNGLGETRENDERBUFFERPARAMETERIVPROC)(uint32_t target, uint32_t pname, GLint *params);
GLAPI PFNGLGETRENDERBUFFERPARAMETERIVPROC ARGLGetRenderbufferParameteriv;
#define glGetRenderbufferParameteriv ARGLGetRenderbufferParameteriv
typedef GLboolean (*PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
GLAPI PFNGLISFRAMEBUFFERPROC ARGLIsFramebuffer;
#define glIsFramebuffer ARGLIsFramebuffer
typedef void (*PFNGLBINDFRAMEBUFFERPROC)(uint32_t target, GLuint framebuffer);
GLAPI PFNGLBINDFRAMEBUFFERPROC ARGLBindFramebuffer;
#define glBindFramebuffer ARGLBindFramebuffer
typedef void (*PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint *framebuffers);
GLAPI PFNGLDELETEFRAMEBUFFERSPROC ARGLDeleteFramebuffers;
#define glDeleteFramebuffers ARGLDeleteFramebuffers
typedef void (*PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint *framebuffers);
GLAPI PFNGLGENFRAMEBUFFERSPROC ARGLGenFramebuffers;
#define glGenFramebuffers ARGLGenFramebuffers
typedef uint32_t (*PFNGLCHECKFRAMEBUFFERSTATUSPROC)(uint32_t target);
GLAPI PFNGLCHECKFRAMEBUFFERSTATUSPROC ARGLCheckFramebufferStatus;
#define glCheckFramebufferStatus ARGLCheckFramebufferStatus
typedef void (*PFNGLFRAMEBUFFERTEXTURE1DPROC)(uint32_t target, uint32_t attachment, uint32_t textarget, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTURE1DPROC ARGLFramebufferTexture1D;
#define glFramebufferTexture1D ARGLFramebufferTexture1D
typedef void (*PFNGLFRAMEBUFFERTEXTURE2DPROC)(uint32_t target, uint32_t attachment, uint32_t textarget, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTURE2DPROC ARGLFramebufferTexture2D;
#define glFramebufferTexture2D ARGLFramebufferTexture2D
typedef void (*PFNGLFRAMEBUFFERTEXTURE3DPROC)(uint32_t target, uint32_t attachment, uint32_t textarget, GLuint texture, GLint level, GLint zoffset);
GLAPI PFNGLFRAMEBUFFERTEXTURE3DPROC ARGLFramebufferTexture3D;
#define glFramebufferTexture3D ARGLFramebufferTexture3D
typedef void (*PFNGLFRAMEBUFFERRENDERBUFFERPROC)(uint32_t target, uint32_t attachment, uint32_t renderbuffertarget, GLuint renderbuffer);
GLAPI PFNGLFRAMEBUFFERRENDERBUFFERPROC ARGLFramebufferRenderbuffer;
#define glFramebufferRenderbuffer ARGLFramebufferRenderbuffer
typedef void (*PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(uint32_t target, uint32_t attachment, uint32_t pname, GLint *params);
GLAPI PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC ARGLGetFramebufferAttachmentParameteriv;
#define glGetFramebufferAttachmentParameteriv ARGLGetFramebufferAttachmentParameteriv
typedef void (*PFNGLGENERATEMIPMAPPROC)(uint32_t target);
GLAPI PFNGLGENERATEMIPMAPPROC ARGLGenerateMipmap;
#define glGenerateMipmap ARGLGenerateMipmap
typedef void (*PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, uint32_t filter);
GLAPI PFNGLBLITFRAMEBUFFERPROC ARGLBlitFramebuffer;
#define glBlitFramebuffer ARGLBlitFramebuffer
typedef void (*PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(uint32_t target, GLsizei samples, uint32_t internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC ARGLRenderbufferStorageMultisample;
#define glRenderbufferStorageMultisample ARGLRenderbufferStorageMultisample
typedef void (*PFNGLFRAMEBUFFERTEXTURELAYERPROC)(uint32_t target, uint32_t attachment, GLuint texture, GLint level, GLint layer);
GLAPI PFNGLFRAMEBUFFERTEXTURELAYERPROC ARGLFramebufferTextureLayer;
#define glFramebufferTextureLayer ARGLFramebufferTextureLayer
typedef void * (*PFNGLMAPBUFFERRANGEPROC)(uint32_t target, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLAPI PFNGLMAPBUFFERRANGEPROC ARGLMapBufferRange;
#define glMapBufferRange ARGLMapBufferRange
typedef void (*PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(uint32_t target, GLintptr offset, GLsizeiptr length);
GLAPI PFNGLFLUSHMAPPEDBUFFERRANGEPROC ARGLFlushMappedBufferRange;
#define glFlushMappedBufferRange ARGLFlushMappedBufferRange
typedef void (*PFNGLBINDVERTEXARRAYPROC)(GLuint array);
GLAPI PFNGLBINDVERTEXARRAYPROC ARGLBindVertexArray;
#define glBindVertexArray ARGLBindVertexArray
typedef void (*PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint *arrays);
GLAPI PFNGLDELETEVERTEXARRAYSPROC ARGLDeleteVertexArrays;
#define glDeleteVertexArrays ARGLDeleteVertexArrays
typedef void (*PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint *arrays);
GLAPI PFNGLGENVERTEXARRAYSPROC ARGLGenVertexArrays;
#define glGenVertexArrays ARGLGenVertexArrays
typedef GLboolean (*PFNGLISVERTEXARRAYPROC)(GLuint array);
GLAPI PFNGLISVERTEXARRAYPROC ARGLIsVertexArray;
#define glIsVertexArray ARGLIsVertexArray

typedef void (*PFNGLDRAWARRAYSINSTANCEDPROC)(uint32_t mode, GLint first, GLsizei count, GLsizei instancecount);
GLAPI PFNGLDRAWARRAYSINSTANCEDPROC ARGLDrawArraysInstanced;
#define glDrawArraysInstanced ARGLDrawArraysInstanced
typedef void (*PFNGLDRAWELEMENTSINSTANCEDPROC)(uint32_t mode, GLsizei count, uint32_t type, const void *indices, GLsizei instancecount);
GLAPI PFNGLDRAWELEMENTSINSTANCEDPROC ARGLDrawElementsInstanced;
#define glDrawElementsInstanced ARGLDrawElementsInstanced
typedef void (*PFNGLTEXBUFFERPROC)(uint32_t target, uint32_t internalformat, GLuint buffer);
GLAPI PFNGLTEXBUFFERPROC ARGLTexBuffer;
#define glTexBuffer ARGLTexBuffer
typedef void (*PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
GLAPI PFNGLPRIMITIVERESTARTINDEXPROC ARGLPrimitiveRestartIndex;
#define glPrimitiveRestartIndex ARGLPrimitiveRestartIndex
typedef void (*PFNGLCOPYBUFFERSUBDATAPROC)(uint32_t readTarget, uint32_t writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLAPI PFNGLCOPYBUFFERSUBDATAPROC ARGLCopyBufferSubData;
#define glCopyBufferSubData ARGLCopyBufferSubData
typedef void (*PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
GLAPI PFNGLGETUNIFORMINDICESPROC ARGLGetUniformIndices;
#define glGetUniformIndices ARGLGetUniformIndices
typedef void (*PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, uint32_t pname, GLint *params);
GLAPI PFNGLGETACTIVEUNIFORMSIVPROC ARGLGetActiveUniformsiv;
#define glGetActiveUniformsiv ARGLGetActiveUniformsiv
typedef void (*PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
GLAPI PFNGLGETACTIVEUNIFORMNAMEPROC ARGLGetActiveUniformName;
#define glGetActiveUniformName ARGLGetActiveUniformName
typedef GLuint (*PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar *uniformBlockName);
GLAPI PFNGLGETUNIFORMBLOCKINDEXPROC ARGLGetUniformBlockIndex;
#define glGetUniformBlockIndex ARGLGetUniformBlockIndex
typedef void (*PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, uint32_t pname, GLint *params);
GLAPI PFNGLGETACTIVEUNIFORMBLOCKIVPROC ARGLGetActiveUniformBlockiv;
#define glGetActiveUniformBlockiv ARGLGetActiveUniformBlockiv
typedef void (*PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
GLAPI PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC ARGLGetActiveUniformBlockName;
#define glGetActiveUniformBlockName ARGLGetActiveUniformBlockName
typedef void (*PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
GLAPI PFNGLUNIFORMBLOCKBINDINGPROC ARGLUniformBlockBinding;
#define glUniformBlockBinding ARGLUniformBlockBinding

typedef void (*PFNGLDRAWELEMENTSBASEVERTEXPROC)(uint32_t mode, GLsizei count, uint32_t type, const void *indices, GLint basevertex);
GLAPI PFNGLDRAWELEMENTSBASEVERTEXPROC ARGLDrawElementsBaseVertex;
#define glDrawElementsBaseVertex ARGLDrawElementsBaseVertex
typedef void (*PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(uint32_t mode, GLuint start, GLuint end, GLsizei count, uint32_t type, const void *indices, GLint basevertex);
GLAPI PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC ARGLDrawRangeElementsBaseVertex;
#define glDrawRangeElementsBaseVertex ARGLDrawRangeElementsBaseVertex
typedef void (*PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(uint32_t mode, GLsizei count, uint32_t type, const void *indices, GLsizei instancecount, GLint basevertex);
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC ARGLDrawElementsInstancedBaseVertex;
#define glDrawElementsInstancedBaseVertex ARGLDrawElementsInstancedBaseVertex
typedef void (*PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(uint32_t mode, const GLsizei *count, uint32_t type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
GLAPI PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC ARGLMultiDrawElementsBaseVertex;
#define glMultiDrawElementsBaseVertex ARGLMultiDrawElementsBaseVertex
typedef void (*PFNGLPROVOKINGVERTEXPROC)(uint32_t mode);
GLAPI PFNGLPROVOKINGVERTEXPROC ARGLProvokingVertex;
#define glProvokingVertex ARGLProvokingVertex
typedef GLsync (*PFNGLFENCESYNCPROC)(uint32_t condition, GLbitfield flags);
GLAPI PFNGLFENCESYNCPROC ARGLFenceSync;
#define glFenceSync ARGLFenceSync
typedef GLboolean (*PFNGLISSYNCPROC)(GLsync sync);
GLAPI PFNGLISSYNCPROC ARGLIsSync;
#define glIsSync ARGLIsSync
typedef void (*PFNGLDELETESYNCPROC)(GLsync sync);
GLAPI PFNGLDELETESYNCPROC ARGLDeleteSync;
#define glDeleteSync ARGLDeleteSync
typedef uint32_t (*PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
GLAPI PFNGLCLIENTWAITSYNCPROC ARGLClientWaitSync;
#define glClientWaitSync ARGLClientWaitSync
typedef void (*PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
GLAPI PFNGLWAITSYNCPROC ARGLWaitSync;
#define glWaitSync ARGLWaitSync
typedef void (*PFNGLGETINTEGER64VPROC)(uint32_t pname, GLint64 *data);
GLAPI PFNGLGETINTEGER64VPROC ARGLGetInteger64v;
#define glGetInteger64v ARGLGetInteger64v
typedef void (*PFNGLGETSYNCIVPROC)(GLsync sync, uint32_t pname, GLsizei count, GLsizei *length, GLint *values);
GLAPI PFNGLGETSYNCIVPROC ARGLGetSynciv;
#define glGetSynciv ARGLGetSynciv
typedef void (*PFNGLGETINTEGER64I_VPROC)(uint32_t target, GLuint index, GLint64 *data);
GLAPI PFNGLGETINTEGER64I_VPROC ARGLGetInteger64i_v;
#define glGetInteger64i_v ARGLGetInteger64i_v
typedef void (*PFNGLGETBUFFERPARAMETERI64VPROC)(uint32_t target, uint32_t pname, GLint64 *params);
GLAPI PFNGLGETBUFFERPARAMETERI64VPROC ARGLGetBufferParameteri64v;
#define glGetBufferParameteri64v ARGLGetBufferParameteri64v
typedef void (*PFNGLFRAMEBUFFERTEXTUREPROC)(uint32_t target, uint32_t attachment, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTUREPROC ARGLFramebufferTexture;
#define glFramebufferTexture ARGLFramebufferTexture
typedef void (*PFNGLTEXIMAGE2DMULTISAMPLEPROC)(uint32_t target, GLsizei samples, uint32_t internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXIMAGE2DMULTISAMPLEPROC ARGLTexImage2DMultisample;
#define glTexImage2DMultisample ARGLTexImage2DMultisample
typedef void (*PFNGLTEXIMAGE3DMULTISAMPLEPROC)(uint32_t target, GLsizei samples, uint32_t internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXIMAGE3DMULTISAMPLEPROC ARGLTexImage3DMultisample;
#define glTexImage3DMultisample ARGLTexImage3DMultisample
typedef void (*PFNGLGETMULTISAMPLEFVPROC)(uint32_t pname, GLuint index, GLfloat *val);
GLAPI PFNGLGETMULTISAMPLEFVPROC ARGLGetMultisamplefv;
#define glGetMultisamplefv ARGLGetMultisamplefv
typedef void (*PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
GLAPI PFNGLSAMPLEMASKIPROC ARGLSampleMaski;
#define glSampleMaski ARGLSampleMaski

typedef void (*PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
GLAPI PFNGLBINDFRAGDATALOCATIONINDEXEDPROC ARGLBindFragDataLocationIndexed;
#define glBindFragDataLocationIndexed ARGLBindFragDataLocationIndexed
typedef GLint (*PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar *name);
GLAPI PFNGLGETFRAGDATAINDEXPROC ARGLGetFragDataIndex;
#define glGetFragDataIndex ARGLGetFragDataIndex
typedef void (*PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint *samplers);
GLAPI PFNGLGENSAMPLERSPROC ARGLGenSamplers;
#define glGenSamplers ARGLGenSamplers
typedef void (*PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint *samplers);
GLAPI PFNGLDELETESAMPLERSPROC ARGLDeleteSamplers;
#define glDeleteSamplers ARGLDeleteSamplers
typedef GLboolean (*PFNGLISSAMPLERPROC)(GLuint sampler);
GLAPI PFNGLISSAMPLERPROC ARGLIsSampler;
#define glIsSampler ARGLIsSampler
typedef void (*PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
GLAPI PFNGLBINDSAMPLERPROC ARGLBindSampler;
#define glBindSampler ARGLBindSampler
typedef void (*PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, uint32_t pname, GLint param);
GLAPI PFNGLSAMPLERPARAMETERIPROC ARGLSamplerParameteri;
#define glSamplerParameteri ARGLSamplerParameteri
typedef void (*PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, uint32_t pname, const GLint *param);
GLAPI PFNGLSAMPLERPARAMETERIVPROC ARGLSamplerParameteriv;
#define glSamplerParameteriv ARGLSamplerParameteriv
typedef void (*PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, uint32_t pname, GLfloat param);
GLAPI PFNGLSAMPLERPARAMETERFPROC ARGLSamplerParameterf;
#define glSamplerParameterf ARGLSamplerParameterf
typedef void (*PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, uint32_t pname, const GLfloat *param);
GLAPI PFNGLSAMPLERPARAMETERFVPROC ARGLSamplerParameterfv;
#define glSamplerParameterfv ARGLSamplerParameterfv
typedef void (*PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, uint32_t pname, const GLint *param);
GLAPI PFNGLSAMPLERPARAMETERIIVPROC ARGLSamplerParameterIiv;
#define glSamplerParameterIiv ARGLSamplerParameterIiv
typedef void (*PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, uint32_t pname, const GLuint *param);
GLAPI PFNGLSAMPLERPARAMETERIUIVPROC ARGLSamplerParameterIuiv;
#define glSamplerParameterIuiv ARGLSamplerParameterIuiv
typedef void (*PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, uint32_t pname, GLint *params);
GLAPI PFNGLGETSAMPLERPARAMETERIVPROC ARGLGetSamplerParameteriv;
#define glGetSamplerParameteriv ARGLGetSamplerParameteriv
typedef void (*PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, uint32_t pname, GLint *params);
GLAPI PFNGLGETSAMPLERPARAMETERIIVPROC ARGLGetSamplerParameterIiv;
#define glGetSamplerParameterIiv ARGLGetSamplerParameterIiv
typedef void (*PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, uint32_t pname, GLfloat *params);
GLAPI PFNGLGETSAMPLERPARAMETERFVPROC ARGLGetSamplerParameterfv;
#define glGetSamplerParameterfv ARGLGetSamplerParameterfv
typedef void (*PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, uint32_t pname, GLuint *params);
GLAPI PFNGLGETSAMPLERPARAMETERIUIVPROC ARGLGetSamplerParameterIuiv;
#define glGetSamplerParameterIuiv ARGLGetSamplerParameterIuiv
typedef void (*PFNGLQUERYCOUNTERPROC)(GLuint id, uint32_t target);
GLAPI PFNGLQUERYCOUNTERPROC ARGLQueryCounter;
#define glQueryCounter ARGLQueryCounter
typedef void (*PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, uint32_t pname, GLint64 *params);
GLAPI PFNGLGETQUERYOBJECTI64VPROC ARGLGetQueryObjecti64v;
#define glGetQueryObjecti64v ARGLGetQueryObjecti64v
typedef void (*PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, uint32_t pname, GLuint64 *params);
GLAPI PFNGLGETQUERYOBJECTUI64VPROC ARGLGetQueryObjectui64v;
#define glGetQueryObjectui64v ARGLGetQueryObjectui64v
typedef void (*PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
GLAPI PFNGLVERTEXATTRIBDIVISORPROC ARGLVertexAttribDivisor;
#define glVertexAttribDivisor ARGLVertexAttribDivisor
typedef void (*PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, uint32_t type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP1UIPROC ARGLVertexAttribP1ui;
#define glVertexAttribP1ui ARGLVertexAttribP1ui
typedef void (*PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, uint32_t type, GLboolean normalized, const GLuint *value);
GLAPI PFNGLVERTEXATTRIBP1UIVPROC ARGLVertexAttribP1uiv;
#define glVertexAttribP1uiv ARGLVertexAttribP1uiv
typedef void (*PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, uint32_t type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP2UIPROC ARGLVertexAttribP2ui;
#define glVertexAttribP2ui ARGLVertexAttribP2ui
typedef void (*PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, uint32_t type, GLboolean normalized, const GLuint *value);
GLAPI PFNGLVERTEXATTRIBP2UIVPROC ARGLVertexAttribP2uiv;
#define glVertexAttribP2uiv ARGLVertexAttribP2uiv
typedef void (*PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, uint32_t type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP3UIPROC ARGLVertexAttribP3ui;
#define glVertexAttribP3ui ARGLVertexAttribP3ui
typedef void (*PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, uint32_t type, GLboolean normalized, const GLuint *value);
GLAPI PFNGLVERTEXATTRIBP3UIVPROC ARGLVertexAttribP3uiv;
#define glVertexAttribP3uiv ARGLVertexAttribP3uiv
typedef void (*PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, uint32_t type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP4UIPROC ARGLVertexAttribP4ui;
#define glVertexAttribP4ui ARGLVertexAttribP4ui
typedef void (*PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, uint32_t type, GLboolean normalized, const GLuint *value);
GLAPI PFNGLVERTEXATTRIBP4UIVPROC ARGLVertexAttribP4uiv;
#define glVertexAttribP4uiv ARGLVertexAttribP4uiv
typedef void (*PFNGLVERTEXP2UIPROC)(uint32_t type, GLuint value);
GLAPI PFNGLVERTEXP2UIPROC ARGLVertexP2ui;
#define glVertexP2ui ARGLVertexP2ui
typedef void (*PFNGLVERTEXP2UIVPROC)(uint32_t type, const GLuint *value);
GLAPI PFNGLVERTEXP2UIVPROC ARGLVertexP2uiv;
#define glVertexP2uiv ARGLVertexP2uiv
typedef void (*PFNGLVERTEXP3UIPROC)(uint32_t type, GLuint value);
GLAPI PFNGLVERTEXP3UIPROC ARGLVertexP3ui;
#define glVertexP3ui ARGLVertexP3ui
typedef void (*PFNGLVERTEXP3UIVPROC)(uint32_t type, const GLuint *value);
GLAPI PFNGLVERTEXP3UIVPROC ARGLVertexP3uiv;
#define glVertexP3uiv ARGLVertexP3uiv
typedef void (*PFNGLVERTEXP4UIPROC)(uint32_t type, GLuint value);
GLAPI PFNGLVERTEXP4UIPROC ARGLVertexP4ui;
#define glVertexP4ui ARGLVertexP4ui
typedef void (*PFNGLVERTEXP4UIVPROC)(uint32_t type, const GLuint *value);
GLAPI PFNGLVERTEXP4UIVPROC ARGLVertexP4uiv;
#define glVertexP4uiv ARGLVertexP4uiv
typedef void (*PFNGLTEXCOORDP1UIPROC)(uint32_t type, GLuint coords);
GLAPI PFNGLTEXCOORDP1UIPROC ARGLTexCoordP1ui;
#define glTexCoordP1ui ARGLTexCoordP1ui
typedef void (*PFNGLTEXCOORDP1UIVPROC)(uint32_t type, const GLuint *coords);
GLAPI PFNGLTEXCOORDP1UIVPROC ARGLTexCoordP1uiv;
#define glTexCoordP1uiv ARGLTexCoordP1uiv
typedef void (*PFNGLTEXCOORDP2UIPROC)(uint32_t type, GLuint coords);
GLAPI PFNGLTEXCOORDP2UIPROC ARGLTexCoordP2ui;
#define glTexCoordP2ui ARGLTexCoordP2ui
typedef void (*PFNGLTEXCOORDP2UIVPROC)(uint32_t type, const GLuint *coords);
GLAPI PFNGLTEXCOORDP2UIVPROC ARGLTexCoordP2uiv;
#define glTexCoordP2uiv ARGLTexCoordP2uiv
typedef void (*PFNGLTEXCOORDP3UIPROC)(uint32_t type, GLuint coords);
GLAPI PFNGLTEXCOORDP3UIPROC ARGLTexCoordP3ui;
#define glTexCoordP3ui ARGLTexCoordP3ui
typedef void (*PFNGLTEXCOORDP3UIVPROC)(uint32_t type, const GLuint *coords);
GLAPI PFNGLTEXCOORDP3UIVPROC ARGLTexCoordP3uiv;
#define glTexCoordP3uiv ARGLTexCoordP3uiv
typedef void (*PFNGLTEXCOORDP4UIPROC)(uint32_t type, GLuint coords);
GLAPI PFNGLTEXCOORDP4UIPROC ARGLTexCoordP4ui;
#define glTexCoordP4ui ARGLTexCoordP4ui
typedef void (*PFNGLTEXCOORDP4UIVPROC)(uint32_t type, const GLuint *coords);
GLAPI PFNGLTEXCOORDP4UIVPROC ARGLTexCoordP4uiv;
#define glTexCoordP4uiv ARGLTexCoordP4uiv
typedef void (*PFNGLMULTITEXCOORDP1UIPROC)(uint32_t texture, uint32_t type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP1UIPROC ARGLMultiTexCoordP1ui;
#define glMultiTexCoordP1ui ARGLMultiTexCoordP1ui
typedef void (*PFNGLMULTITEXCOORDP1UIVPROC)(uint32_t texture, uint32_t type, const GLuint *coords);
GLAPI PFNGLMULTITEXCOORDP1UIVPROC ARGLMultiTexCoordP1uiv;
#define glMultiTexCoordP1uiv ARGLMultiTexCoordP1uiv
typedef void (*PFNGLMULTITEXCOORDP2UIPROC)(uint32_t texture, uint32_t type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP2UIPROC ARGLMultiTexCoordP2ui;
#define glMultiTexCoordP2ui ARGLMultiTexCoordP2ui
typedef void (*PFNGLMULTITEXCOORDP2UIVPROC)(uint32_t texture, uint32_t type, const GLuint *coords);
GLAPI PFNGLMULTITEXCOORDP2UIVPROC ARGLMultiTexCoordP2uiv;
#define glMultiTexCoordP2uiv ARGLMultiTexCoordP2uiv
typedef void (*PFNGLMULTITEXCOORDP3UIPROC)(uint32_t texture, uint32_t type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP3UIPROC ARGLMultiTexCoordP3ui;
#define glMultiTexCoordP3ui ARGLMultiTexCoordP3ui
typedef void (*PFNGLMULTITEXCOORDP3UIVPROC)(uint32_t texture, uint32_t type, const GLuint *coords);
GLAPI PFNGLMULTITEXCOORDP3UIVPROC ARGLMultiTexCoordP3uiv;
#define glMultiTexCoordP3uiv ARGLMultiTexCoordP3uiv
typedef void (*PFNGLMULTITEXCOORDP4UIPROC)(uint32_t texture, uint32_t type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP4UIPROC ARGLMultiTexCoordP4ui;
#define glMultiTexCoordP4ui ARGLMultiTexCoordP4ui
typedef void (*PFNGLMULTITEXCOORDP4UIVPROC)(uint32_t texture, uint32_t type, const GLuint *coords);
GLAPI PFNGLMULTITEXCOORDP4UIVPROC ARGLMultiTexCoordP4uiv;
#define glMultiTexCoordP4uiv ARGLMultiTexCoordP4uiv
typedef void (*PFNGLNORMALP3UIPROC)(uint32_t type, GLuint coords);
GLAPI PFNGLNORMALP3UIPROC ARGLNormalP3ui;
#define glNormalP3ui ARGLNormalP3ui
typedef void (*PFNGLNORMALP3UIVPROC)(uint32_t type, const GLuint *coords);
GLAPI PFNGLNORMALP3UIVPROC ARGLNormalP3uiv;
#define glNormalP3uiv ARGLNormalP3uiv
typedef void (*PFNGLCOLORP3UIPROC)(uint32_t type, GLuint color);
GLAPI PFNGLCOLORP3UIPROC ARGLColorP3ui;
#define glColorP3ui ARGLColorP3ui
typedef void (*PFNGLCOLORP3UIVPROC)(uint32_t type, const GLuint *color);
GLAPI PFNGLCOLORP3UIVPROC ARGLColorP3uiv;
#define glColorP3uiv ARGLColorP3uiv
typedef void (*PFNGLCOLORP4UIPROC)(uint32_t type, GLuint color);
GLAPI PFNGLCOLORP4UIPROC ARGLColorP4ui;
#define glColorP4ui ARGLColorP4ui
typedef void (*PFNGLCOLORP4UIVPROC)(uint32_t type, const GLuint *color);
GLAPI PFNGLCOLORP4UIVPROC ARGLColorP4uiv;
#define glColorP4uiv ARGLColorP4uiv
typedef void (*PFNGLSECONDARYCOLORP3UIPROC)(uint32_t type, GLuint color);
GLAPI PFNGLSECONDARYCOLORP3UIPROC ARGLSecondaryColorP3ui;
#define glSecondaryColorP3ui ARGLSecondaryColorP3ui
typedef void (*PFNGLSECONDARYCOLORP3UIVPROC)(uint32_t type, const GLuint *color);
GLAPI PFNGLSECONDARYCOLORP3UIVPROC ARGLSecondaryColorP3uiv;
#define glSecondaryColorP3uiv ARGLSecondaryColorP3uiv

typedef void (*PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
GLAPI PFNGLMINSAMPLESHADINGPROC ARGLMinSampleShading;
#define glMinSampleShading ARGLMinSampleShading
typedef void (*PFNGLBLENDEQUATIONIPROC)(GLuint buf, uint32_t mode);
GLAPI PFNGLBLENDEQUATIONIPROC ARGLBlendEquationi;
#define glBlendEquationi ARGLBlendEquationi
typedef void (*PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, uint32_t modeRGB, uint32_t modeAlpha);
GLAPI PFNGLBLENDEQUATIONSEPARATEIPROC ARGLBlendEquationSeparatei;
#define glBlendEquationSeparatei ARGLBlendEquationSeparatei
typedef void (*PFNGLBLENDFUNCIPROC)(GLuint buf, uint32_t src, uint32_t dst);
GLAPI PFNGLBLENDFUNCIPROC ARGLBlendFunci;
#define glBlendFunci ARGLBlendFunci
typedef void (*PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, uint32_t srcRGB, uint32_t dstRGB, uint32_t srcAlpha, uint32_t dstAlpha);
GLAPI PFNGLBLENDFUNCSEPARATEIPROC ARGLBlendFuncSeparatei;
#define glBlendFuncSeparatei ARGLBlendFuncSeparatei
typedef void (*PFNGLDRAWARRAYSINDIRECTPROC)(uint32_t mode, const void *indirect);
GLAPI PFNGLDRAWARRAYSINDIRECTPROC ARGLDrawArraysIndirect;
#define glDrawArraysIndirect ARGLDrawArraysIndirect
typedef void (*PFNGLDRAWELEMENTSINDIRECTPROC)(uint32_t mode, uint32_t type, const void *indirect);
GLAPI PFNGLDRAWELEMENTSINDIRECTPROC ARGLDrawElementsIndirect;
#define glDrawElementsIndirect ARGLDrawElementsIndirect
typedef void (*PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
GLAPI PFNGLUNIFORM1DPROC ARGLUniform1d;
#define glUniform1d ARGLUniform1d
typedef void (*PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
GLAPI PFNGLUNIFORM2DPROC ARGLUniform2d;
#define glUniform2d ARGLUniform2d
typedef void (*PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLUNIFORM3DPROC ARGLUniform3d;
#define glUniform3d ARGLUniform3d
typedef void (*PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLUNIFORM4DPROC ARGLUniform4d;
#define glUniform4d ARGLUniform4d
typedef void (*PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLUNIFORM1DVPROC ARGLUniform1dv;
#define glUniform1dv ARGLUniform1dv
typedef void (*PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLUNIFORM2DVPROC ARGLUniform2dv;
#define glUniform2dv ARGLUniform2dv
typedef void (*PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLUNIFORM3DVPROC ARGLUniform3dv;
#define glUniform3dv ARGLUniform3dv
typedef void (*PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLUNIFORM4DVPROC ARGLUniform4dv;
#define glUniform4dv ARGLUniform4dv
typedef void (*PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX2DVPROC ARGLUniformMatrix2dv;
#define glUniformMatrix2dv ARGLUniformMatrix2dv
typedef void (*PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX3DVPROC ARGLUniformMatrix3dv;
#define glUniformMatrix3dv ARGLUniformMatrix3dv
typedef void (*PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX4DVPROC ARGLUniformMatrix4dv;
#define glUniformMatrix4dv ARGLUniformMatrix4dv
typedef void (*PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX2X3DVPROC ARGLUniformMatrix2x3dv;
#define glUniformMatrix2x3dv ARGLUniformMatrix2x3dv
typedef void (*PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX2X4DVPROC ARGLUniformMatrix2x4dv;
#define glUniformMatrix2x4dv ARGLUniformMatrix2x4dv
typedef void (*PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX3X2DVPROC ARGLUniformMatrix3x2dv;
#define glUniformMatrix3x2dv ARGLUniformMatrix3x2dv
typedef void (*PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX3X4DVPROC ARGLUniformMatrix3x4dv;
#define glUniformMatrix3x4dv ARGLUniformMatrix3x4dv
typedef void (*PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX4X2DVPROC ARGLUniformMatrix4x2dv;
#define glUniformMatrix4x2dv ARGLUniformMatrix4x2dv
typedef void (*PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLUNIFORMMATRIX4X3DVPROC ARGLUniformMatrix4x3dv;
#define glUniformMatrix4x3dv ARGLUniformMatrix4x3dv
typedef void (*PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble *params);
GLAPI PFNGLGETUNIFORMDVPROC ARGLGetUniformdv;
#define glGetUniformdv ARGLGetUniformdv
typedef GLint (*PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, uint32_t shadertype, const GLchar *name);
GLAPI PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC ARGLGetSubroutineUniformLocation;
#define glGetSubroutineUniformLocation ARGLGetSubroutineUniformLocation
typedef GLuint (*PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, uint32_t shadertype, const GLchar *name);
GLAPI PFNGLGETSUBROUTINEINDEXPROC ARGLGetSubroutineIndex;
#define glGetSubroutineIndex ARGLGetSubroutineIndex
typedef void (*PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, uint32_t shadertype, GLuint index, uint32_t pname, GLint *values);
GLAPI PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC ARGLGetActiveSubroutineUniformiv;
#define glGetActiveSubroutineUniformiv ARGLGetActiveSubroutineUniformiv
typedef void (*PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, uint32_t shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
GLAPI PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC ARGLGetActiveSubroutineUniformName;
#define glGetActiveSubroutineUniformName ARGLGetActiveSubroutineUniformName
typedef void (*PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, uint32_t shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
GLAPI PFNGLGETACTIVESUBROUTINENAMEPROC ARGLGetActiveSubroutineName;
#define glGetActiveSubroutineName ARGLGetActiveSubroutineName
typedef void (*PFNGLUNIFORMSUBROUTINESUIVPROC)(uint32_t shadertype, GLsizei count, const GLuint *indices);
GLAPI PFNGLUNIFORMSUBROUTINESUIVPROC ARGLUniformSubroutinesuiv;
#define glUniformSubroutinesuiv ARGLUniformSubroutinesuiv
typedef void (*PFNGLGETUNIFORMSUBROUTINEUIVPROC)(uint32_t shadertype, GLint location, GLuint *params);
GLAPI PFNGLGETUNIFORMSUBROUTINEUIVPROC ARGLGetUniformSubroutineuiv;
#define glGetUniformSubroutineuiv ARGLGetUniformSubroutineuiv
typedef void (*PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, uint32_t shadertype, uint32_t pname, GLint *values);
GLAPI PFNGLGETPROGRAMSTAGEIVPROC ARGLGetProgramStageiv;
#define glGetProgramStageiv ARGLGetProgramStageiv
typedef void (*PFNGLPATCHPARAMETERIPROC)(uint32_t pname, GLint value);
GLAPI PFNGLPATCHPARAMETERIPROC ARGLPatchParameteri;
#define glPatchParameteri ARGLPatchParameteri
typedef void (*PFNGLPATCHPARAMETERFVPROC)(uint32_t pname, const GLfloat *values);
GLAPI PFNGLPATCHPARAMETERFVPROC ARGLPatchParameterfv;
#define glPatchParameterfv ARGLPatchParameterfv
typedef void (*PFNGLBINDTRANSFORMFEEDBACKPROC)(uint32_t target, GLuint id);
GLAPI PFNGLBINDTRANSFORMFEEDBACKPROC ARGLBindTransformFeedback;
#define glBindTransformFeedback ARGLBindTransformFeedback
typedef void (*PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint *ids);
GLAPI PFNGLDELETETRANSFORMFEEDBACKSPROC ARGLDeleteTransformFeedbacks;
#define glDeleteTransformFeedbacks ARGLDeleteTransformFeedbacks
typedef void (*PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint *ids);
GLAPI PFNGLGENTRANSFORMFEEDBACKSPROC ARGLGenTransformFeedbacks;
#define glGenTransformFeedbacks ARGLGenTransformFeedbacks
typedef GLboolean (*PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
GLAPI PFNGLISTRANSFORMFEEDBACKPROC ARGLIsTransformFeedback;
#define glIsTransformFeedback ARGLIsTransformFeedback
typedef void (*PFNGLPAUSETRANSFORMFEEDBACKPROC)(void);
GLAPI PFNGLPAUSETRANSFORMFEEDBACKPROC ARGLPauseTransformFeedback;
#define glPauseTransformFeedback ARGLPauseTransformFeedback
typedef void (*PFNGLRESUMETRANSFORMFEEDBACKPROC)(void);
GLAPI PFNGLRESUMETRANSFORMFEEDBACKPROC ARGLResumeTransformFeedback;
#define glResumeTransformFeedback ARGLResumeTransformFeedback
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKPROC)(uint32_t mode, GLuint id);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKPROC ARGLDrawTransformFeedback;
#define glDrawTransformFeedback ARGLDrawTransformFeedback
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(uint32_t mode, GLuint id, GLuint stream);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC ARGLDrawTransformFeedbackStream;
#define glDrawTransformFeedbackStream ARGLDrawTransformFeedbackStream
typedef void (*PFNGLBEGINQUERYINDEXEDPROC)(uint32_t target, GLuint index, GLuint id);
GLAPI PFNGLBEGINQUERYINDEXEDPROC ARGLBeginQueryIndexed;
#define glBeginQueryIndexed ARGLBeginQueryIndexed
typedef void (*PFNGLENDQUERYINDEXEDPROC)(uint32_t target, GLuint index);
GLAPI PFNGLENDQUERYINDEXEDPROC ARGLEndQueryIndexed;
#define glEndQueryIndexed ARGLEndQueryIndexed
typedef void (*PFNGLGETQUERYINDEXEDIVPROC)(uint32_t target, GLuint index, uint32_t pname, GLint *params);
GLAPI PFNGLGETQUERYINDEXEDIVPROC ARGLGetQueryIndexediv;
#define glGetQueryIndexediv ARGLGetQueryIndexediv

typedef void (*PFNGLRELEASESHADERCOMPILERPROC)(void);
GLAPI PFNGLRELEASESHADERCOMPILERPROC ARGLReleaseShaderCompiler;
#define glReleaseShaderCompiler ARGLReleaseShaderCompiler
typedef void (*PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint *shaders, uint32_t binaryFormat, const void *binary, GLsizei length);
GLAPI PFNGLSHADERBINARYPROC ARGLShaderBinary;
#define glShaderBinary ARGLShaderBinary
typedef void (*PFNGLGETSHADERPRECISIONFORMATPROC)(uint32_t shadertype, uint32_t precisiontype, GLint *range, GLint *precision);
GLAPI PFNGLGETSHADERPRECISIONFORMATPROC ARGLGetShaderPrecisionFormat;
#define glGetShaderPrecisionFormat ARGLGetShaderPrecisionFormat
typedef void (*PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
GLAPI PFNGLDEPTHRANGEFPROC ARGLDepthRangef;
#define glDepthRangef ARGLDepthRangef
typedef void (*PFNGLCLEARDEPTHFPROC)(GLfloat d);
GLAPI PFNGLCLEARDEPTHFPROC ARGLClearDepthf;
#define glClearDepthf ARGLClearDepthf
typedef void (*PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei *length, uint32_t *binaryFormat, void *binary);
GLAPI PFNGLGETPROGRAMBINARYPROC ARGLGetProgramBinary;
#define glGetProgramBinary ARGLGetProgramBinary
typedef void (*PFNGLPROGRAMBINARYPROC)(GLuint program, uint32_t binaryFormat, const void *binary, GLsizei length);
GLAPI PFNGLPROGRAMBINARYPROC ARGLProgramBinary;
#define glProgramBinary ARGLProgramBinary
typedef void (*PFNGLPROGRAMPARAMETERIPROC)(GLuint program, uint32_t pname, GLint value);
GLAPI PFNGLPROGRAMPARAMETERIPROC ARGLProgramParameteri;
#define glProgramParameteri ARGLProgramParameteri
typedef void (*PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
GLAPI PFNGLUSEPROGRAMSTAGESPROC ARGLUseProgramStages;
#define glUseProgramStages ARGLUseProgramStages
typedef void (*PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
GLAPI PFNGLACTIVESHADERPROGRAMPROC ARGLActiveShaderProgram;
#define glActiveShaderProgram ARGLActiveShaderProgram
typedef GLuint (*PFNGLCREATESHADERPROGRAMVPROC)(uint32_t type, GLsizei count, const GLchar *const*strings);
GLAPI PFNGLCREATESHADERPROGRAMVPROC ARGLCreateShaderProgramv;
#define glCreateShaderProgramv ARGLCreateShaderProgramv
typedef void (*PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
GLAPI PFNGLBINDPROGRAMPIPELINEPROC ARGLBindProgramPipeline;
#define glBindProgramPipeline ARGLBindProgramPipeline
typedef void (*PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint *pipelines);
GLAPI PFNGLDELETEPROGRAMPIPELINESPROC ARGLDeleteProgramPipelines;
#define glDeleteProgramPipelines ARGLDeleteProgramPipelines
typedef void (*PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint *pipelines);
GLAPI PFNGLGENPROGRAMPIPELINESPROC ARGLGenProgramPipelines;
#define glGenProgramPipelines ARGLGenProgramPipelines
typedef GLboolean (*PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
GLAPI PFNGLISPROGRAMPIPELINEPROC ARGLIsProgramPipeline;
#define glIsProgramPipeline ARGLIsProgramPipeline
typedef void (*PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, uint32_t pname, GLint *params);
GLAPI PFNGLGETPROGRAMPIPELINEIVPROC ARGLGetProgramPipelineiv;
#define glGetProgramPipelineiv ARGLGetProgramPipelineiv
typedef void (*PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
GLAPI PFNGLPROGRAMUNIFORM1IPROC ARGLProgramUniform1i;
#define glProgramUniform1i ARGLProgramUniform1i
typedef void (*PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLPROGRAMUNIFORM1IVPROC ARGLProgramUniform1iv;
#define glProgramUniform1iv ARGLProgramUniform1iv
typedef void (*PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
GLAPI PFNGLPROGRAMUNIFORM1FPROC ARGLProgramUniform1f;
#define glProgramUniform1f ARGLProgramUniform1f
typedef void (*PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORM1FVPROC ARGLProgramUniform1fv;
#define glProgramUniform1fv ARGLProgramUniform1fv
typedef void (*PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
GLAPI PFNGLPROGRAMUNIFORM1DPROC ARGLProgramUniform1d;
#define glProgramUniform1d ARGLProgramUniform1d
typedef void (*PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORM1DVPROC ARGLProgramUniform1dv;
#define glProgramUniform1dv ARGLProgramUniform1dv
typedef void (*PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
GLAPI PFNGLPROGRAMUNIFORM1UIPROC ARGLProgramUniform1ui;
#define glProgramUniform1ui ARGLProgramUniform1ui
typedef void (*PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLPROGRAMUNIFORM1UIVPROC ARGLProgramUniform1uiv;
#define glProgramUniform1uiv ARGLProgramUniform1uiv
typedef void (*PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
GLAPI PFNGLPROGRAMUNIFORM2IPROC ARGLProgramUniform2i;
#define glProgramUniform2i ARGLProgramUniform2i
typedef void (*PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLPROGRAMUNIFORM2IVPROC ARGLProgramUniform2iv;
#define glProgramUniform2iv ARGLProgramUniform2iv
typedef void (*PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
GLAPI PFNGLPROGRAMUNIFORM2FPROC ARGLProgramUniform2f;
#define glProgramUniform2f ARGLProgramUniform2f
typedef void (*PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORM2FVPROC ARGLProgramUniform2fv;
#define glProgramUniform2fv ARGLProgramUniform2fv
typedef void (*PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
GLAPI PFNGLPROGRAMUNIFORM2DPROC ARGLProgramUniform2d;
#define glProgramUniform2d ARGLProgramUniform2d
typedef void (*PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORM2DVPROC ARGLProgramUniform2dv;
#define glProgramUniform2dv ARGLProgramUniform2dv
typedef void (*PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
GLAPI PFNGLPROGRAMUNIFORM2UIPROC ARGLProgramUniform2ui;
#define glProgramUniform2ui ARGLProgramUniform2ui
typedef void (*PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLPROGRAMUNIFORM2UIVPROC ARGLProgramUniform2uiv;
#define glProgramUniform2uiv ARGLProgramUniform2uiv
typedef void (*PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
GLAPI PFNGLPROGRAMUNIFORM3IPROC ARGLProgramUniform3i;
#define glProgramUniform3i ARGLProgramUniform3i
typedef void (*PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLPROGRAMUNIFORM3IVPROC ARGLProgramUniform3iv;
#define glProgramUniform3iv ARGLProgramUniform3iv
typedef void (*PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI PFNGLPROGRAMUNIFORM3FPROC ARGLProgramUniform3f;
#define glProgramUniform3f ARGLProgramUniform3f
typedef void (*PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORM3FVPROC ARGLProgramUniform3fv;
#define glProgramUniform3fv ARGLProgramUniform3fv
typedef void (*PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
GLAPI PFNGLPROGRAMUNIFORM3DPROC ARGLProgramUniform3d;
#define glProgramUniform3d ARGLProgramUniform3d
typedef void (*PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORM3DVPROC ARGLProgramUniform3dv;
#define glProgramUniform3dv ARGLProgramUniform3dv
typedef void (*PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
GLAPI PFNGLPROGRAMUNIFORM3UIPROC ARGLProgramUniform3ui;
#define glProgramUniform3ui ARGLProgramUniform3ui
typedef void (*PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLPROGRAMUNIFORM3UIVPROC ARGLProgramUniform3uiv;
#define glProgramUniform3uiv ARGLProgramUniform3uiv
typedef void (*PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI PFNGLPROGRAMUNIFORM4IPROC ARGLProgramUniform4i;
#define glProgramUniform4i ARGLProgramUniform4i
typedef void (*PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
GLAPI PFNGLPROGRAMUNIFORM4IVPROC ARGLProgramUniform4iv;
#define glProgramUniform4iv ARGLProgramUniform4iv
typedef void (*PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI PFNGLPROGRAMUNIFORM4FPROC ARGLProgramUniform4f;
#define glProgramUniform4f ARGLProgramUniform4f
typedef void (*PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORM4FVPROC ARGLProgramUniform4fv;
#define glProgramUniform4fv ARGLProgramUniform4fv
typedef void (*PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
GLAPI PFNGLPROGRAMUNIFORM4DPROC ARGLProgramUniform4d;
#define glProgramUniform4d ARGLProgramUniform4d
typedef void (*PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORM4DVPROC ARGLProgramUniform4dv;
#define glProgramUniform4dv ARGLProgramUniform4dv
typedef void (*PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLAPI PFNGLPROGRAMUNIFORM4UIPROC ARGLProgramUniform4ui;
#define glProgramUniform4ui ARGLProgramUniform4ui
typedef void (*PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLAPI PFNGLPROGRAMUNIFORM4UIVPROC ARGLProgramUniform4uiv;
#define glProgramUniform4uiv ARGLProgramUniform4uiv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2FVPROC ARGLProgramUniformMatrix2fv;
#define glProgramUniformMatrix2fv ARGLProgramUniformMatrix2fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3FVPROC ARGLProgramUniformMatrix3fv;
#define glProgramUniformMatrix3fv ARGLProgramUniformMatrix3fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4FVPROC ARGLProgramUniformMatrix4fv;
#define glProgramUniformMatrix4fv ARGLProgramUniformMatrix4fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2DVPROC ARGLProgramUniformMatrix2dv;
#define glProgramUniformMatrix2dv ARGLProgramUniformMatrix2dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3DVPROC ARGLProgramUniformMatrix3dv;
#define glProgramUniformMatrix3dv ARGLProgramUniformMatrix3dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4DVPROC ARGLProgramUniformMatrix4dv;
#define glProgramUniformMatrix4dv ARGLProgramUniformMatrix4dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC ARGLProgramUniformMatrix2x3fv;
#define glProgramUniformMatrix2x3fv ARGLProgramUniformMatrix2x3fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC ARGLProgramUniformMatrix3x2fv;
#define glProgramUniformMatrix3x2fv ARGLProgramUniformMatrix3x2fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC ARGLProgramUniformMatrix2x4fv;
#define glProgramUniformMatrix2x4fv ARGLProgramUniformMatrix2x4fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC ARGLProgramUniformMatrix4x2fv;
#define glProgramUniformMatrix4x2fv ARGLProgramUniformMatrix4x2fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC ARGLProgramUniformMatrix3x4fv;
#define glProgramUniformMatrix3x4fv ARGLProgramUniformMatrix3x4fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC ARGLProgramUniformMatrix4x3fv;
#define glProgramUniformMatrix4x3fv ARGLProgramUniformMatrix4x3fv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC ARGLProgramUniformMatrix2x3dv;
#define glProgramUniformMatrix2x3dv ARGLProgramUniformMatrix2x3dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC ARGLProgramUniformMatrix3x2dv;
#define glProgramUniformMatrix3x2dv ARGLProgramUniformMatrix3x2dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC ARGLProgramUniformMatrix2x4dv;
#define glProgramUniformMatrix2x4dv ARGLProgramUniformMatrix2x4dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC ARGLProgramUniformMatrix4x2dv;
#define glProgramUniformMatrix4x2dv ARGLProgramUniformMatrix4x2dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC ARGLProgramUniformMatrix3x4dv;
#define glProgramUniformMatrix3x4dv ARGLProgramUniformMatrix3x4dv
typedef void (*PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC ARGLProgramUniformMatrix4x3dv;
#define glProgramUniformMatrix4x3dv ARGLProgramUniformMatrix4x3dv
typedef void (*PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
GLAPI PFNGLVALIDATEPROGRAMPIPELINEPROC ARGLValidateProgramPipeline;
#define glValidateProgramPipeline ARGLValidateProgramPipeline
typedef void (*PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLAPI PFNGLGETPROGRAMPIPELINEINFOLOGPROC ARGLGetProgramPipelineInfoLog;
#define glGetProgramPipelineInfoLog ARGLGetProgramPipelineInfoLog
typedef void (*PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
GLAPI PFNGLVERTEXATTRIBL1DPROC ARGLVertexAttribL1d;
#define glVertexAttribL1d ARGLVertexAttribL1d
typedef void (*PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
GLAPI PFNGLVERTEXATTRIBL2DPROC ARGLVertexAttribL2d;
#define glVertexAttribL2d ARGLVertexAttribL2d
typedef void (*PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLVERTEXATTRIBL3DPROC ARGLVertexAttribL3d;
#define glVertexAttribL3d ARGLVertexAttribL3d
typedef void (*PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLVERTEXATTRIBL4DPROC ARGLVertexAttribL4d;
#define glVertexAttribL4d ARGLVertexAttribL4d
typedef void (*PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIBL1DVPROC ARGLVertexAttribL1dv;
#define glVertexAttribL1dv ARGLVertexAttribL1dv
typedef void (*PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIBL2DVPROC ARGLVertexAttribL2dv;
#define glVertexAttribL2dv ARGLVertexAttribL2dv
typedef void (*PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIBL3DVPROC ARGLVertexAttribL3dv;
#define glVertexAttribL3dv ARGLVertexAttribL3dv
typedef void (*PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble *v);
GLAPI PFNGLVERTEXATTRIBL4DVPROC ARGLVertexAttribL4dv;
#define glVertexAttribL4dv ARGLVertexAttribL4dv
typedef void (*PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, uint32_t type, GLsizei stride, const void *pointer);
GLAPI PFNGLVERTEXATTRIBLPOINTERPROC ARGLVertexAttribLPointer;
#define glVertexAttribLPointer ARGLVertexAttribLPointer
typedef void (*PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, uint32_t pname, GLdouble *params);
GLAPI PFNGLGETVERTEXATTRIBLDVPROC ARGLGetVertexAttribLdv;
#define glGetVertexAttribLdv ARGLGetVertexAttribLdv
typedef void (*PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat *v);
GLAPI PFNGLVIEWPORTARRAYVPROC ARGLViewportArrayv;
#define glViewportArrayv ARGLViewportArrayv
typedef void (*PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
GLAPI PFNGLVIEWPORTINDEXEDFPROC ARGLViewportIndexedf;
#define glViewportIndexedf ARGLViewportIndexedf
typedef void (*PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat *v);
GLAPI PFNGLVIEWPORTINDEXEDFVPROC ARGLViewportIndexedfv;
#define glViewportIndexedfv ARGLViewportIndexedfv
typedef void (*PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint *v);
GLAPI PFNGLSCISSORARRAYVPROC ARGLScissorArrayv;
#define glScissorArrayv ARGLScissorArrayv
typedef void (*PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
GLAPI PFNGLSCISSORINDEXEDPROC ARGLScissorIndexed;
#define glScissorIndexed ARGLScissorIndexed
typedef void (*PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint *v);
GLAPI PFNGLSCISSORINDEXEDVPROC ARGLScissorIndexedv;
#define glScissorIndexedv ARGLScissorIndexedv
typedef void (*PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble *v);
GLAPI PFNGLDEPTHRANGEARRAYVPROC ARGLDepthRangeArrayv;
#define glDepthRangeArrayv ARGLDepthRangeArrayv
typedef void (*PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
GLAPI PFNGLDEPTHRANGEINDEXEDPROC ARGLDepthRangeIndexed;
#define glDepthRangeIndexed ARGLDepthRangeIndexed
typedef void (*PFNGLGETFLOATI_VPROC)(uint32_t target, GLuint index, GLfloat *data);
GLAPI PFNGLGETFLOATI_VPROC ARGLGetFloati_v;
#define glGetFloati_v ARGLGetFloati_v
typedef void (*PFNGLGETDOUBLEI_VPROC)(uint32_t target, GLuint index, GLdouble *data);
GLAPI PFNGLGETDOUBLEI_VPROC ARGLGetDoublei_v;
#define glGetDoublei_v ARGLGetDoublei_v

typedef void (*PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)(uint32_t mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
GLAPI PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC ARGLDrawArraysInstancedBaseInstance;
#define glDrawArraysInstancedBaseInstance ARGLDrawArraysInstancedBaseInstance
typedef void (*PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)(uint32_t mode, GLsizei count, uint32_t type, const void *indices, GLsizei instancecount, GLuint baseinstance);
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC ARGLDrawElementsInstancedBaseInstance;
#define glDrawElementsInstancedBaseInstance ARGLDrawElementsInstancedBaseInstance
typedef void (*PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)(uint32_t mode, GLsizei count, uint32_t type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC ARGLDrawElementsInstancedBaseVertexBaseInstance;
#define glDrawElementsInstancedBaseVertexBaseInstance ARGLDrawElementsInstancedBaseVertexBaseInstance
typedef void (*PFNGLGETINTERNALFORMATIVPROC)(uint32_t target, uint32_t internalformat, uint32_t pname, GLsizei count, GLint *params);
GLAPI PFNGLGETINTERNALFORMATIVPROC ARGLGetInternalformativ;
#define glGetInternalformativ ARGLGetInternalformativ
typedef void (*PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)(GLuint program, GLuint bufferIndex, uint32_t pname, GLint *params);
GLAPI PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC ARGLGetActiveAtomicCounterBufferiv;
#define glGetActiveAtomicCounterBufferiv ARGLGetActiveAtomicCounterBufferiv
typedef void (*PFNGLBINDIMAGETEXTUREPROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, uint32_t access, uint32_t format);
GLAPI PFNGLBINDIMAGETEXTUREPROC ARGLBindImageTexture;
#define glBindImageTexture ARGLBindImageTexture
typedef void (*PFNGLMEMORYBARRIERPROC)(GLbitfield barriers);
GLAPI PFNGLMEMORYBARRIERPROC ARGLMemoryBarrier;
#define glMemoryBarrier ARGLMemoryBarrier
typedef void (*PFNGLTEXSTORAGE1DPROC)(uint32_t target, GLsizei levels, uint32_t internalformat, GLsizei width);
GLAPI PFNGLTEXSTORAGE1DPROC ARGLTexStorage1D;
#define glTexStorage1D ARGLTexStorage1D
typedef void (*PFNGLTEXSTORAGE2DPROC)(uint32_t target, GLsizei levels, uint32_t internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLTEXSTORAGE2DPROC ARGLTexStorage2D;
#define glTexStorage2D ARGLTexStorage2D
typedef void (*PFNGLTEXSTORAGE3DPROC)(uint32_t target, GLsizei levels, uint32_t internalformat, GLsizei width, GLsizei height, GLsizei depth);
GLAPI PFNGLTEXSTORAGE3DPROC ARGLTexStorage3D;
#define glTexStorage3D ARGLTexStorage3D
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)(uint32_t mode, GLuint id, GLsizei instancecount);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC ARGLDrawTransformFeedbackInstanced;
#define glDrawTransformFeedbackInstanced ARGLDrawTransformFeedbackInstanced
typedef void (*PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)(uint32_t mode, GLuint id, GLuint stream, GLsizei instancecount);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC ARGLDrawTransformFeedbackStreamInstanced;
#define glDrawTransformFeedbackStreamInstanced ARGLDrawTransformFeedbackStreamInstanced

typedef void (*PFNGLCLEARBUFFERDATAPROC)(uint32_t target, uint32_t internalformat, uint32_t format, uint32_t type, const void *data);
GLAPI PFNGLCLEARBUFFERDATAPROC ARGLClearBufferData;
#define glClearBufferData ARGLClearBufferData
typedef void (*PFNGLCLEARBUFFERSUBDATAPROC)(uint32_t target, uint32_t internalformat, GLintptr offset, GLsizeiptr size, uint32_t format, uint32_t type, const void *data);
GLAPI PFNGLCLEARBUFFERSUBDATAPROC ARGLClearBufferSubData;
#define glClearBufferSubData ARGLClearBufferSubData
typedef void (*PFNGLDISPATCHCOMPUTEPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
GLAPI PFNGLDISPATCHCOMPUTEPROC ARGLDispatchCompute;
#define glDispatchCompute ARGLDispatchCompute
typedef void (*PFNGLDISPATCHCOMPUTEINDIRECTPROC)(GLintptr indirect);
GLAPI PFNGLDISPATCHCOMPUTEINDIRECTPROC ARGLDispatchComputeIndirect;
#define glDispatchComputeIndirect ARGLDispatchComputeIndirect
typedef void (*PFNGLCOPYIMAGESUBDATAPROC)(GLuint srcName, uint32_t srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, uint32_t dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
GLAPI PFNGLCOPYIMAGESUBDATAPROC ARGLCopyImageSubData;
#define glCopyImageSubData ARGLCopyImageSubData
typedef void (*PFNGLFRAMEBUFFERPARAMETERIPROC)(uint32_t target, uint32_t pname, GLint param);
GLAPI PFNGLFRAMEBUFFERPARAMETERIPROC ARGLFramebufferParameteri;
#define glFramebufferParameteri ARGLFramebufferParameteri
typedef void (*PFNGLGETFRAMEBUFFERPARAMETERIVPROC)(uint32_t target, uint32_t pname, GLint *params);
GLAPI PFNGLGETFRAMEBUFFERPARAMETERIVPROC ARGLGetFramebufferParameteriv;
#define glGetFramebufferParameteriv ARGLGetFramebufferParameteriv
typedef void (*PFNGLGETINTERNALFORMATI64VPROC)(uint32_t target, uint32_t internalformat, uint32_t pname, GLsizei count, GLint64 *params);
GLAPI PFNGLGETINTERNALFORMATI64VPROC ARGLGetInternalformati64v;
#define glGetInternalformati64v ARGLGetInternalformati64v
typedef void (*PFNGLINVALIDATETEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
GLAPI PFNGLINVALIDATETEXSUBIMAGEPROC ARGLInvalidateTexSubImage;
#define glInvalidateTexSubImage ARGLInvalidateTexSubImage
typedef void (*PFNGLINVALIDATETEXIMAGEPROC)(GLuint texture, GLint level);
GLAPI PFNGLINVALIDATETEXIMAGEPROC ARGLInvalidateTexImage;
#define glInvalidateTexImage ARGLInvalidateTexImage
typedef void (*PFNGLINVALIDATEBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
GLAPI PFNGLINVALIDATEBUFFERSUBDATAPROC ARGLInvalidateBufferSubData;
#define glInvalidateBufferSubData ARGLInvalidateBufferSubData
typedef void (*PFNGLINVALIDATEBUFFERDATAPROC)(GLuint buffer);
GLAPI PFNGLINVALIDATEBUFFERDATAPROC ARGLInvalidateBufferData;
#define glInvalidateBufferData ARGLInvalidateBufferData
typedef void (*PFNGLINVALIDATEFRAMEBUFFERPROC)(uint32_t target, GLsizei numAttachments, const uint32_t *attachments);
GLAPI PFNGLINVALIDATEFRAMEBUFFERPROC ARGLInvalidateFramebuffer;
#define glInvalidateFramebuffer ARGLInvalidateFramebuffer
typedef void (*PFNGLINVALIDATESUBFRAMEBUFFERPROC)(uint32_t target, GLsizei numAttachments, const uint32_t *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLINVALIDATESUBFRAMEBUFFERPROC ARGLInvalidateSubFramebuffer;
#define glInvalidateSubFramebuffer ARGLInvalidateSubFramebuffer
typedef void (*PFNGLMULTIDRAWARRAYSINDIRECTPROC)(uint32_t mode, const void *indirect, GLsizei drawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWARRAYSINDIRECTPROC ARGLMultiDrawArraysIndirect;
#define glMultiDrawArraysIndirect ARGLMultiDrawArraysIndirect
typedef void (*PFNGLMULTIDRAWELEMENTSINDIRECTPROC)(uint32_t mode, uint32_t type, const void *indirect, GLsizei drawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTPROC ARGLMultiDrawElementsIndirect;
#define glMultiDrawElementsIndirect ARGLMultiDrawElementsIndirect
typedef void (*PFNGLGETPROGRAMINTERFACEIVPROC)(GLuint program, uint32_t programInterface, uint32_t pname, GLint *params);
GLAPI PFNGLGETPROGRAMINTERFACEIVPROC ARGLGetProgramInterfaceiv;
#define glGetProgramInterfaceiv ARGLGetProgramInterfaceiv
typedef GLuint (*PFNGLGETPROGRAMRESOURCEINDEXPROC)(GLuint program, uint32_t programInterface, const GLchar *name);
GLAPI PFNGLGETPROGRAMRESOURCEINDEXPROC ARGLGetProgramResourceIndex;
#define glGetProgramResourceIndex ARGLGetProgramResourceIndex
typedef void (*PFNGLGETPROGRAMRESOURCENAMEPROC)(GLuint program, uint32_t programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
GLAPI PFNGLGETPROGRAMRESOURCENAMEPROC ARGLGetProgramResourceName;
#define glGetProgramResourceName ARGLGetProgramResourceName
typedef void (*PFNGLGETPROGRAMRESOURCEIVPROC)(GLuint program, uint32_t programInterface, GLuint index, GLsizei propCount, const uint32_t *props, GLsizei count, GLsizei *length, GLint *params);
GLAPI PFNGLGETPROGRAMRESOURCEIVPROC ARGLGetProgramResourceiv;
#define glGetProgramResourceiv ARGLGetProgramResourceiv
typedef GLint (*PFNGLGETPROGRAMRESOURCELOCATIONPROC)(GLuint program, uint32_t programInterface, const GLchar *name);
GLAPI PFNGLGETPROGRAMRESOURCELOCATIONPROC ARGLGetProgramResourceLocation;
#define glGetProgramResourceLocation ARGLGetProgramResourceLocation
typedef GLint (*PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)(GLuint program, uint32_t programInterface, const GLchar *name);
GLAPI PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC ARGLGetProgramResourceLocationIndex;
#define glGetProgramResourceLocationIndex ARGLGetProgramResourceLocationIndex
typedef void (*PFNGLSHADERSTORAGEBLOCKBINDINGPROC)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
GLAPI PFNGLSHADERSTORAGEBLOCKBINDINGPROC ARGLShaderStorageBlockBinding;
#define glShaderStorageBlockBinding ARGLShaderStorageBlockBinding
typedef void (*PFNGLTEXBUFFERRANGEPROC)(uint32_t target, uint32_t internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLTEXBUFFERRANGEPROC ARGLTexBufferRange;
#define glTexBufferRange ARGLTexBufferRange
typedef void (*PFNGLTEXSTORAGE2DMULTISAMPLEPROC)(uint32_t target, GLsizei samples, uint32_t internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXSTORAGE2DMULTISAMPLEPROC ARGLTexStorage2DMultisample;
#define glTexStorage2DMultisample ARGLTexStorage2DMultisample
typedef void (*PFNGLTEXSTORAGE3DMULTISAMPLEPROC)(uint32_t target, GLsizei samples, uint32_t internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXSTORAGE3DMULTISAMPLEPROC ARGLTexStorage3DMultisample;
#define glTexStorage3DMultisample ARGLTexStorage3DMultisample
typedef void (*PFNGLTEXTUREVIEWPROC)(GLuint texture, uint32_t target, GLuint origtexture, uint32_t internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
GLAPI PFNGLTEXTUREVIEWPROC ARGLTextureView;
#define glTextureView ARGLTextureView
typedef void (*PFNGLBINDVERTEXBUFFERPROC)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GLAPI PFNGLBINDVERTEXBUFFERPROC ARGLBindVertexBuffer;
#define glBindVertexBuffer ARGLBindVertexBuffer
typedef void (*PFNGLVERTEXATTRIBFORMATPROC)(GLuint attribindex, GLint size, uint32_t type, GLboolean normalized, GLuint relativeoffset);
GLAPI PFNGLVERTEXATTRIBFORMATPROC ARGLVertexAttribFormat;
#define glVertexAttribFormat ARGLVertexAttribFormat
typedef void (*PFNGLVERTEXATTRIBIFORMATPROC)(GLuint attribindex, GLint size, uint32_t type, GLuint relativeoffset);
GLAPI PFNGLVERTEXATTRIBIFORMATPROC ARGLVertexAttribIFormat;
#define glVertexAttribIFormat ARGLVertexAttribIFormat
typedef void (*PFNGLVERTEXATTRIBLFORMATPROC)(GLuint attribindex, GLint size, uint32_t type, GLuint relativeoffset);
GLAPI PFNGLVERTEXATTRIBLFORMATPROC ARGLVertexAttribLFormat;
#define glVertexAttribLFormat ARGLVertexAttribLFormat
typedef void (*PFNGLVERTEXATTRIBBINDINGPROC)(GLuint attribindex, GLuint bindingindex);
GLAPI PFNGLVERTEXATTRIBBINDINGPROC ARGLVertexAttribBinding;
#define glVertexAttribBinding ARGLVertexAttribBinding
typedef void (*PFNGLVERTEXBINDINGDIVISORPROC)(GLuint bindingindex, GLuint divisor);
GLAPI PFNGLVERTEXBINDINGDIVISORPROC ARGLVertexBindingDivisor;
#define glVertexBindingDivisor ARGLVertexBindingDivisor
typedef void (*PFNGLDEBUGMESSAGECONTROLPROC)(uint32_t source, uint32_t type, uint32_t severity, GLsizei count, const GLuint *ids, GLboolean enabled);
GLAPI PFNGLDEBUGMESSAGECONTROLPROC ARGLDebugMessageControl;
#define glDebugMessageControl ARGLDebugMessageControl
typedef void (*PFNGLDEBUGMESSAGEINSERTPROC)(uint32_t source, uint32_t type, GLuint id, uint32_t severity, GLsizei length, const GLchar *buf);
GLAPI PFNGLDEBUGMESSAGEINSERTPROC ARGLDebugMessageInsert;
#define glDebugMessageInsert ARGLDebugMessageInsert
typedef void (*PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void *userParam);
GLAPI PFNGLDEBUGMESSAGECALLBACKPROC ARGLDebugMessageCallback;
#define glDebugMessageCallback ARGLDebugMessageCallback
typedef GLuint (*PFNGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, uint32_t *sources, uint32_t *types, GLuint *ids, uint32_t *severities, GLsizei *lengths, GLchar *messageLog);
GLAPI PFNGLGETDEBUGMESSAGELOGPROC ARGLGetDebugMessageLog;
#define glGetDebugMessageLog ARGLGetDebugMessageLog
typedef void (*PFNGLPUSHDEBUGGROUPPROC)(uint32_t source, GLuint id, GLsizei length, const GLchar *message);
GLAPI PFNGLPUSHDEBUGGROUPPROC ARGLPushDebugGroup;
#define glPushDebugGroup ARGLPushDebugGroup
typedef void (*PFNGLPOPDEBUGGROUPPROC)(void);
GLAPI PFNGLPOPDEBUGGROUPPROC ARGLPopDebugGroup;
#define glPopDebugGroup ARGLPopDebugGroup
typedef void (*PFNGLOBJECTLABELPROC)(uint32_t identifier, GLuint name, GLsizei length, const GLchar *label);
GLAPI PFNGLOBJECTLABELPROC ARGLObjectLabel;
#define glObjectLabel ARGLObjectLabel
typedef void (*PFNGLGETOBJECTLABELPROC)(uint32_t identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
GLAPI PFNGLGETOBJECTLABELPROC ARGLGetObjectLabel;
#define glGetObjectLabel ARGLGetObjectLabel
typedef void (*PFNGLOBJECTPTRLABELPROC)(const void *ptr, GLsizei length, const GLchar *label);
GLAPI PFNGLOBJECTPTRLABELPROC ARGLObjectPtrLabel;
#define glObjectPtrLabel ARGLObjectPtrLabel
typedef void (*PFNGLGETOBJECTPTRLABELPROC)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
GLAPI PFNGLGETOBJECTPTRLABELPROC ARGLGetObjectPtrLabel;
#define glGetObjectPtrLabel ARGLGetObjectPtrLabel
typedef void (*PFNGLGETPOINTERVPROC)(uint32_t pname, void **params);
GLAPI PFNGLGETPOINTERVPROC ARGLGetPointerv;
#define glGetPointerv ARGLGetPointerv

typedef void (*PFNGLBUFFERSTORAGEPROC)(uint32_t target, GLsizeiptr size, const void *data, GLbitfield flags);
GLAPI PFNGLBUFFERSTORAGEPROC ARGLBufferStorage;
#define glBufferStorage ARGLBufferStorage
typedef void (*PFNGLCLEARTEXIMAGEPROC)(GLuint texture, GLint level, uint32_t format, uint32_t type, const void *data);
GLAPI PFNGLCLEARTEXIMAGEPROC ARGLClearTexImage;
#define glClearTexImage ARGLClearTexImage
typedef void (*PFNGLCLEARTEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, uint32_t format, uint32_t type, const void *data);
GLAPI PFNGLCLEARTEXSUBIMAGEPROC ARGLClearTexSubImage;
#define glClearTexSubImage ARGLClearTexSubImage
typedef void (*PFNGLBINDBUFFERSBASEPROC)(uint32_t target, GLuint first, GLsizei count, const GLuint *buffers);
GLAPI PFNGLBINDBUFFERSBASEPROC ARGLBindBuffersBase;
#define glBindBuffersBase ARGLBindBuffersBase
typedef void (*PFNGLBINDBUFFERSRANGEPROC)(uint32_t target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
GLAPI PFNGLBINDBUFFERSRANGEPROC ARGLBindBuffersRange;
#define glBindBuffersRange ARGLBindBuffersRange
typedef void (*PFNGLBINDTEXTURESPROC)(GLuint first, GLsizei count, const GLuint *textures);
GLAPI PFNGLBINDTEXTURESPROC ARGLBindTextures;
#define glBindTextures ARGLBindTextures
typedef void (*PFNGLBINDSAMPLERSPROC)(GLuint first, GLsizei count, const GLuint *samplers);
GLAPI PFNGLBINDSAMPLERSPROC ARGLBindSamplers;
#define glBindSamplers ARGLBindSamplers
typedef void (*PFNGLBINDIMAGETEXTURESPROC)(GLuint first, GLsizei count, const GLuint *textures);
GLAPI PFNGLBINDIMAGETEXTURESPROC ARGLBindImageTextures;
#define glBindImageTextures ARGLBindImageTextures
typedef void (*PFNGLBINDVERTEXBUFFERSPROC)(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
GLAPI PFNGLBINDVERTEXBUFFERSPROC ARGLBindVertexBuffers;
#define glBindVertexBuffers ARGLBindVertexBuffers

typedef void (*PFNGLCLIPCONTROLPROC)(uint32_t origin, uint32_t depth);
GLAPI PFNGLCLIPCONTROLPROC ARGLClipControl;
#define glClipControl ARGLClipControl
typedef void (*PFNGLCREATETRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint *ids);
GLAPI PFNGLCREATETRANSFORMFEEDBACKSPROC ARGLCreateTransformFeedbacks;
#define glCreateTransformFeedbacks ARGLCreateTransformFeedbacks
typedef void (*PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)(GLuint xfb, GLuint index, GLuint buffer);
GLAPI PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC ARGLTransformFeedbackBufferBase;
#define glTransformFeedbackBufferBase ARGLTransformFeedbackBufferBase
typedef void (*PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC ARGLTransformFeedbackBufferRange;
#define glTransformFeedbackBufferRange ARGLTransformFeedbackBufferRange
typedef void (*PFNGLGETTRANSFORMFEEDBACKIVPROC)(GLuint xfb, uint32_t pname, GLint *param);
GLAPI PFNGLGETTRANSFORMFEEDBACKIVPROC ARGLGetTransformFeedbackiv;
#define glGetTransformFeedbackiv ARGLGetTransformFeedbackiv
typedef void (*PFNGLGETTRANSFORMFEEDBACKI_VPROC)(GLuint xfb, uint32_t pname, GLuint index, GLint *param);
GLAPI PFNGLGETTRANSFORMFEEDBACKI_VPROC ARGLGetTransformFeedbacki_v;
#define glGetTransformFeedbacki_v ARGLGetTransformFeedbacki_v
typedef void (*PFNGLGETTRANSFORMFEEDBACKI64_VPROC)(GLuint xfb, uint32_t pname, GLuint index, GLint64 *param);
GLAPI PFNGLGETTRANSFORMFEEDBACKI64_VPROC ARGLGetTransformFeedbacki64_v;
#define glGetTransformFeedbacki64_v ARGLGetTransformFeedbacki64_v
typedef void (*PFNGLCREATEBUFFERSPROC)(GLsizei n, GLuint *buffers);
GLAPI PFNGLCREATEBUFFERSPROC ARGLCreateBuffers;
#define glCreateBuffers ARGLCreateBuffers
typedef void (*PFNGLNAMEDBUFFERSTORAGEPROC)(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
GLAPI PFNGLNAMEDBUFFERSTORAGEPROC ARGLNamedBufferStorage;
#define glNamedBufferStorage ARGLNamedBufferStorage
typedef void (*PFNGLNAMEDBUFFERDATAPROC)(GLuint buffer, GLsizeiptr size, const void *data, uint32_t usage);
GLAPI PFNGLNAMEDBUFFERDATAPROC ARGLNamedBufferData;
#define glNamedBufferData ARGLNamedBufferData
typedef void (*PFNGLNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
GLAPI PFNGLNAMEDBUFFERSUBDATAPROC ARGLNamedBufferSubData;
#define glNamedBufferSubData ARGLNamedBufferSubData
typedef void (*PFNGLCOPYNAMEDBUFFERSUBDATAPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLAPI PFNGLCOPYNAMEDBUFFERSUBDATAPROC ARGLCopyNamedBufferSubData;
#define glCopyNamedBufferSubData ARGLCopyNamedBufferSubData
typedef void (*PFNGLCLEARNAMEDBUFFERDATAPROC)(GLuint buffer, uint32_t internalformat, uint32_t format, uint32_t type, const void *data);
GLAPI PFNGLCLEARNAMEDBUFFERDATAPROC ARGLClearNamedBufferData;
#define glClearNamedBufferData ARGLClearNamedBufferData
typedef void (*PFNGLCLEARNAMEDBUFFERSUBDATAPROC)(GLuint buffer, uint32_t internalformat, GLintptr offset, GLsizeiptr size, uint32_t format, uint32_t type, const void *data);
GLAPI PFNGLCLEARNAMEDBUFFERSUBDATAPROC ARGLClearNamedBufferSubData;
#define glClearNamedBufferSubData ARGLClearNamedBufferSubData
typedef void * (*PFNGLMAPNAMEDBUFFERPROC)(GLuint buffer, uint32_t access);
GLAPI PFNGLMAPNAMEDBUFFERPROC ARGLMapNamedBuffer;
#define glMapNamedBuffer ARGLMapNamedBuffer
typedef void * (*PFNGLMAPNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLAPI PFNGLMAPNAMEDBUFFERRANGEPROC ARGLMapNamedBufferRange;
#define glMapNamedBufferRange ARGLMapNamedBufferRange
typedef GLboolean (*PFNGLUNMAPNAMEDBUFFERPROC)(GLuint buffer);
GLAPI PFNGLUNMAPNAMEDBUFFERPROC ARGLUnmapNamedBuffer;
#define glUnmapNamedBuffer ARGLUnmapNamedBuffer
typedef void (*PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
GLAPI PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC ARGLFlushMappedNamedBufferRange;
#define glFlushMappedNamedBufferRange ARGLFlushMappedNamedBufferRange
typedef void (*PFNGLGETNAMEDBUFFERPARAMETERIVPROC)(GLuint buffer, uint32_t pname, GLint *params);
GLAPI PFNGLGETNAMEDBUFFERPARAMETERIVPROC ARGLGetNamedBufferParameteriv;
#define glGetNamedBufferParameteriv ARGLGetNamedBufferParameteriv
typedef void (*PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)(GLuint buffer, uint32_t pname, GLint64 *params);
GLAPI PFNGLGETNAMEDBUFFERPARAMETERI64VPROC ARGLGetNamedBufferParameteri64v;
#define glGetNamedBufferParameteri64v ARGLGetNamedBufferParameteri64v
typedef void (*PFNGLGETNAMEDBUFFERPOINTERVPROC)(GLuint buffer, uint32_t pname, void **params);
GLAPI PFNGLGETNAMEDBUFFERPOINTERVPROC ARGLGetNamedBufferPointerv;
#define glGetNamedBufferPointerv ARGLGetNamedBufferPointerv
typedef void (*PFNGLGETNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
GLAPI PFNGLGETNAMEDBUFFERSUBDATAPROC ARGLGetNamedBufferSubData;
#define glGetNamedBufferSubData ARGLGetNamedBufferSubData
typedef void (*PFNGLCREATEFRAMEBUFFERSPROC)(GLsizei n, GLuint *framebuffers);
GLAPI PFNGLCREATEFRAMEBUFFERSPROC ARGLCreateFramebuffers;
#define glCreateFramebuffers ARGLCreateFramebuffers
typedef void (*PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)(GLuint framebuffer, uint32_t attachment, uint32_t renderbuffertarget, GLuint renderbuffer);
GLAPI PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC ARGLNamedFramebufferRenderbuffer;
#define glNamedFramebufferRenderbuffer ARGLNamedFramebufferRenderbuffer
typedef void (*PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)(GLuint framebuffer, uint32_t pname, GLint param);
GLAPI PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC ARGLNamedFramebufferParameteri;
#define glNamedFramebufferParameteri ARGLNamedFramebufferParameteri
typedef void (*PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)(GLuint framebuffer, uint32_t attachment, GLuint texture, GLint level);
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTUREPROC ARGLNamedFramebufferTexture;
#define glNamedFramebufferTexture ARGLNamedFramebufferTexture
typedef void (*PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)(GLuint framebuffer, uint32_t attachment, GLuint texture, GLint level, GLint layer);
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC ARGLNamedFramebufferTextureLayer;
#define glNamedFramebufferTextureLayer ARGLNamedFramebufferTextureLayer
typedef void (*PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)(GLuint framebuffer, uint32_t buf);
GLAPI PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC ARGLNamedFramebufferDrawBuffer;
#define glNamedFramebufferDrawBuffer ARGLNamedFramebufferDrawBuffer
typedef void (*PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)(GLuint framebuffer, GLsizei n, const uint32_t *bufs);
GLAPI PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC ARGLNamedFramebufferDrawBuffers;
#define glNamedFramebufferDrawBuffers ARGLNamedFramebufferDrawBuffers
typedef void (*PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)(GLuint framebuffer, uint32_t src);
GLAPI PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC ARGLNamedFramebufferReadBuffer;
#define glNamedFramebufferReadBuffer ARGLNamedFramebufferReadBuffer
typedef void (*PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const uint32_t *attachments);
GLAPI PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC ARGLInvalidateNamedFramebufferData;
#define glInvalidateNamedFramebufferData ARGLInvalidateNamedFramebufferData
typedef void (*PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const uint32_t *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC ARGLInvalidateNamedFramebufferSubData;
#define glInvalidateNamedFramebufferSubData ARGLInvalidateNamedFramebufferSubData
typedef void (*PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)(GLuint framebuffer, uint32_t buffer, GLint drawbuffer, const GLint *value);
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERIVPROC ARGLClearNamedFramebufferiv;
#define glClearNamedFramebufferiv ARGLClearNamedFramebufferiv
typedef void (*PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)(GLuint framebuffer, uint32_t buffer, GLint drawbuffer, const GLuint *value);
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC ARGLClearNamedFramebufferuiv;
#define glClearNamedFramebufferuiv ARGLClearNamedFramebufferuiv
typedef void (*PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)(GLuint framebuffer, uint32_t buffer, GLint drawbuffer, const GLfloat *value);
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERFVPROC ARGLClearNamedFramebufferfv;
#define glClearNamedFramebufferfv ARGLClearNamedFramebufferfv
typedef void (*PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)(GLuint framebuffer, uint32_t buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERFIPROC ARGLClearNamedFramebufferfi;
#define glClearNamedFramebufferfi ARGLClearNamedFramebufferfi
typedef void (*PFNGLBLITNAMEDFRAMEBUFFERPROC)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, uint32_t filter);
GLAPI PFNGLBLITNAMEDFRAMEBUFFERPROC ARGLBlitNamedFramebuffer;
#define glBlitNamedFramebuffer ARGLBlitNamedFramebuffer
typedef uint32_t (*PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)(GLuint framebuffer, uint32_t target);
GLAPI PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC ARGLCheckNamedFramebufferStatus;
#define glCheckNamedFramebufferStatus ARGLCheckNamedFramebufferStatus
typedef void (*PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)(GLuint framebuffer, uint32_t pname, GLint *param);
GLAPI PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC ARGLGetNamedFramebufferParameteriv;
#define glGetNamedFramebufferParameteriv ARGLGetNamedFramebufferParameteriv
typedef void (*PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLuint framebuffer, uint32_t attachment, uint32_t pname, GLint *params);
GLAPI PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC ARGLGetNamedFramebufferAttachmentParameteriv;
#define glGetNamedFramebufferAttachmentParameteriv ARGLGetNamedFramebufferAttachmentParameteriv
typedef void (*PFNGLCREATERENDERBUFFERSPROC)(GLsizei n, GLuint *renderbuffers);
GLAPI PFNGLCREATERENDERBUFFERSPROC ARGLCreateRenderbuffers;
#define glCreateRenderbuffers ARGLCreateRenderbuffers
typedef void (*PFNGLNAMEDRENDERBUFFERSTORAGEPROC)(GLuint renderbuffer, uint32_t internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLNAMEDRENDERBUFFERSTORAGEPROC ARGLNamedRenderbufferStorage;
#define glNamedRenderbufferStorage ARGLNamedRenderbufferStorage
typedef void (*PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLuint renderbuffer, GLsizei samples, uint32_t internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC ARGLNamedRenderbufferStorageMultisample;
#define glNamedRenderbufferStorageMultisample ARGLNamedRenderbufferStorageMultisample
typedef void (*PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)(GLuint renderbuffer, uint32_t pname, GLint *params);
GLAPI PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC ARGLGetNamedRenderbufferParameteriv;
#define glGetNamedRenderbufferParameteriv ARGLGetNamedRenderbufferParameteriv
typedef void (*PFNGLCREATETEXTURESPROC)(uint32_t target, GLsizei n, GLuint *textures);
GLAPI PFNGLCREATETEXTURESPROC ARGLCreateTextures;
#define glCreateTextures ARGLCreateTextures
typedef void (*PFNGLTEXTUREBUFFERPROC)(GLuint texture, uint32_t internalformat, GLuint buffer);
GLAPI PFNGLTEXTUREBUFFERPROC ARGLTextureBuffer;
#define glTextureBuffer ARGLTextureBuffer
typedef void (*PFNGLTEXTUREBUFFERRANGEPROC)(GLuint texture, uint32_t internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLTEXTUREBUFFERRANGEPROC ARGLTextureBufferRange;
#define glTextureBufferRange ARGLTextureBufferRange
typedef void (*PFNGLTEXTURESTORAGE1DPROC)(GLuint texture, GLsizei levels, uint32_t internalformat, GLsizei width);
GLAPI PFNGLTEXTURESTORAGE1DPROC ARGLTextureStorage1D;
#define glTextureStorage1D ARGLTextureStorage1D
typedef void (*PFNGLTEXTURESTORAGE2DPROC)(GLuint texture, GLsizei levels, uint32_t internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLTEXTURESTORAGE2DPROC ARGLTextureStorage2D;
#define glTextureStorage2D ARGLTextureStorage2D
typedef void (*PFNGLTEXTURESTORAGE3DPROC)(GLuint texture, GLsizei levels, uint32_t internalformat, GLsizei width, GLsizei height, GLsizei depth);
GLAPI PFNGLTEXTURESTORAGE3DPROC ARGLTextureStorage3D;
#define glTextureStorage3D ARGLTextureStorage3D
typedef void (*PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, uint32_t internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC ARGLTextureStorage2DMultisample;
#define glTextureStorage2DMultisample ARGLTextureStorage2DMultisample
typedef void (*PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, uint32_t internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC ARGLTextureStorage3DMultisample;
#define glTextureStorage3DMultisample ARGLTextureStorage3DMultisample
typedef void (*PFNGLTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, uint32_t format, uint32_t type, const void *pixels);
GLAPI PFNGLTEXTURESUBIMAGE1DPROC ARGLTextureSubImage1D;
#define glTextureSubImage1D ARGLTextureSubImage1D
typedef void (*PFNGLTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, uint32_t format, uint32_t type, const void *pixels);
GLAPI PFNGLTEXTURESUBIMAGE2DPROC ARGLTextureSubImage2D;
#define glTextureSubImage2D ARGLTextureSubImage2D
typedef void (*PFNGLTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, uint32_t format, uint32_t type, const void *pixels);
GLAPI PFNGLTEXTURESUBIMAGE3DPROC ARGLTextureSubImage3D;
#define glTextureSubImage3D ARGLTextureSubImage3D
typedef void (*PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, uint32_t format, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC ARGLCompressedTextureSubImage1D;
#define glCompressedTextureSubImage1D ARGLCompressedTextureSubImage1D
typedef void (*PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, uint32_t format, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC ARGLCompressedTextureSubImage2D;
#define glCompressedTextureSubImage2D ARGLCompressedTextureSubImage2D
typedef void (*PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, uint32_t format, GLsizei imageSize, const void *data);
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC ARGLCompressedTextureSubImage3D;
#define glCompressedTextureSubImage3D ARGLCompressedTextureSubImage3D
typedef void (*PFNGLCOPYTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYTEXTURESUBIMAGE1DPROC ARGLCopyTextureSubImage1D;
#define glCopyTextureSubImage1D ARGLCopyTextureSubImage1D
typedef void (*PFNGLCOPYTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXTURESUBIMAGE2DPROC ARGLCopyTextureSubImage2D;
#define glCopyTextureSubImage2D ARGLCopyTextureSubImage2D
typedef void (*PFNGLCOPYTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXTURESUBIMAGE3DPROC ARGLCopyTextureSubImage3D;
#define glCopyTextureSubImage3D ARGLCopyTextureSubImage3D
typedef void (*PFNGLTEXTUREPARAMETERFPROC)(GLuint texture, uint32_t pname, GLfloat param);
GLAPI PFNGLTEXTUREPARAMETERFPROC ARGLTextureParameterf;
#define glTextureParameterf ARGLTextureParameterf
typedef void (*PFNGLTEXTUREPARAMETERFVPROC)(GLuint texture, uint32_t pname, const GLfloat *param);
GLAPI PFNGLTEXTUREPARAMETERFVPROC ARGLTextureParameterfv;
#define glTextureParameterfv ARGLTextureParameterfv
typedef void (*PFNGLTEXTUREPARAMETERIPROC)(GLuint texture, uint32_t pname, GLint param);
GLAPI PFNGLTEXTUREPARAMETERIPROC ARGLTextureParameteri;
#define glTextureParameteri ARGLTextureParameteri
typedef void (*PFNGLTEXTUREPARAMETERIIVPROC)(GLuint texture, uint32_t pname, const GLint *params);
GLAPI PFNGLTEXTUREPARAMETERIIVPROC ARGLTextureParameterIiv;
#define glTextureParameterIiv ARGLTextureParameterIiv
typedef void (*PFNGLTEXTUREPARAMETERIUIVPROC)(GLuint texture, uint32_t pname, const GLuint *params);
GLAPI PFNGLTEXTUREPARAMETERIUIVPROC ARGLTextureParameterIuiv;
#define glTextureParameterIuiv ARGLTextureParameterIuiv
typedef void (*PFNGLTEXTUREPARAMETERIVPROC)(GLuint texture, uint32_t pname, const GLint *param);
GLAPI PFNGLTEXTUREPARAMETERIVPROC ARGLTextureParameteriv;
#define glTextureParameteriv ARGLTextureParameteriv
typedef void (*PFNGLGENERATETEXTUREMIPMAPPROC)(GLuint texture);
GLAPI PFNGLGENERATETEXTUREMIPMAPPROC ARGLGenerateTextureMipmap;
#define glGenerateTextureMipmap ARGLGenerateTextureMipmap
typedef void (*PFNGLBINDTEXTUREUNITPROC)(GLuint unit, GLuint texture);
GLAPI PFNGLBINDTEXTUREUNITPROC ARGLBindTextureUnit;
#define glBindTextureUnit ARGLBindTextureUnit
typedef void (*PFNGLGETTEXTUREIMAGEPROC)(GLuint texture, GLint level, uint32_t format, uint32_t type, GLsizei bufSize, void *pixels);
GLAPI PFNGLGETTEXTUREIMAGEPROC ARGLGetTextureImage;
#define glGetTextureImage ARGLGetTextureImage
typedef void (*PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLsizei bufSize, void *pixels);
GLAPI PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC ARGLGetCompressedTextureImage;
#define glGetCompressedTextureImage ARGLGetCompressedTextureImage
typedef void (*PFNGLGETTEXTURELEVELPARAMETERFVPROC)(GLuint texture, GLint level, uint32_t pname, GLfloat *params);
GLAPI PFNGLGETTEXTURELEVELPARAMETERFVPROC ARGLGetTextureLevelParameterfv;
#define glGetTextureLevelParameterfv ARGLGetTextureLevelParameterfv
typedef void (*PFNGLGETTEXTURELEVELPARAMETERIVPROC)(GLuint texture, GLint level, uint32_t pname, GLint *params);
GLAPI PFNGLGETTEXTURELEVELPARAMETERIVPROC ARGLGetTextureLevelParameteriv;
#define glGetTextureLevelParameteriv ARGLGetTextureLevelParameteriv
typedef void (*PFNGLGETTEXTUREPARAMETERFVPROC)(GLuint texture, uint32_t pname, GLfloat *params);
GLAPI PFNGLGETTEXTUREPARAMETERFVPROC ARGLGetTextureParameterfv;
#define glGetTextureParameterfv ARGLGetTextureParameterfv
typedef void (*PFNGLGETTEXTUREPARAMETERIIVPROC)(GLuint texture, uint32_t pname, GLint *params);
GLAPI PFNGLGETTEXTUREPARAMETERIIVPROC ARGLGetTextureParameterIiv;
#define glGetTextureParameterIiv ARGLGetTextureParameterIiv
typedef void (*PFNGLGETTEXTUREPARAMETERIUIVPROC)(GLuint texture, uint32_t pname, GLuint *params);
GLAPI PFNGLGETTEXTUREPARAMETERIUIVPROC ARGLGetTextureParameterIuiv;
#define glGetTextureParameterIuiv ARGLGetTextureParameterIuiv
typedef void (*PFNGLGETTEXTUREPARAMETERIVPROC)(GLuint texture, uint32_t pname, GLint *params);
GLAPI PFNGLGETTEXTUREPARAMETERIVPROC ARGLGetTextureParameteriv;
#define glGetTextureParameteriv ARGLGetTextureParameteriv
typedef void (*PFNGLCREATEVERTEXARRAYSPROC)(GLsizei n, GLuint *arrays);
GLAPI PFNGLCREATEVERTEXARRAYSPROC ARGLCreateVertexArrays;
#define glCreateVertexArrays ARGLCreateVertexArrays
typedef void (*PFNGLDISABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
GLAPI PFNGLDISABLEVERTEXARRAYATTRIBPROC ARGLDisableVertexArrayAttrib;
#define glDisableVertexArrayAttrib ARGLDisableVertexArrayAttrib
typedef void (*PFNGLENABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
GLAPI PFNGLENABLEVERTEXARRAYATTRIBPROC ARGLEnableVertexArrayAttrib;
#define glEnableVertexArrayAttrib ARGLEnableVertexArrayAttrib
typedef void (*PFNGLVERTEXARRAYELEMENTBUFFERPROC)(GLuint vaobj, GLuint buffer);
GLAPI PFNGLVERTEXARRAYELEMENTBUFFERPROC ARGLVertexArrayElementBuffer;
#define glVertexArrayElementBuffer ARGLVertexArrayElementBuffer
typedef void (*PFNGLVERTEXARRAYVERTEXBUFFERPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GLAPI PFNGLVERTEXARRAYVERTEXBUFFERPROC ARGLVertexArrayVertexBuffer;
#define glVertexArrayVertexBuffer ARGLVertexArrayVertexBuffer
typedef void (*PFNGLVERTEXARRAYVERTEXBUFFERSPROC)(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
GLAPI PFNGLVERTEXARRAYVERTEXBUFFERSPROC ARGLVertexArrayVertexBuffers;
#define glVertexArrayVertexBuffers ARGLVertexArrayVertexBuffers
typedef void (*PFNGLVERTEXARRAYATTRIBBINDINGPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
GLAPI PFNGLVERTEXARRAYATTRIBBINDINGPROC ARGLVertexArrayAttribBinding;
#define glVertexArrayAttribBinding ARGLVertexArrayAttribBinding
typedef void (*PFNGLVERTEXARRAYATTRIBFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, uint32_t type, GLboolean normalized, GLuint relativeoffset);
GLAPI PFNGLVERTEXARRAYATTRIBFORMATPROC ARGLVertexArrayAttribFormat;
#define glVertexArrayAttribFormat ARGLVertexArrayAttribFormat
typedef void (*PFNGLVERTEXARRAYATTRIBIFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, uint32_t type, GLuint relativeoffset);
GLAPI PFNGLVERTEXARRAYATTRIBIFORMATPROC ARGLVertexArrayAttribIFormat;
#define glVertexArrayAttribIFormat ARGLVertexArrayAttribIFormat
typedef void (*PFNGLVERTEXARRAYATTRIBLFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, uint32_t type, GLuint relativeoffset);
GLAPI PFNGLVERTEXARRAYATTRIBLFORMATPROC ARGLVertexArrayAttribLFormat;
#define glVertexArrayAttribLFormat ARGLVertexArrayAttribLFormat
typedef void (*PFNGLVERTEXARRAYBINDINGDIVISORPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
GLAPI PFNGLVERTEXARRAYBINDINGDIVISORPROC ARGLVertexArrayBindingDivisor;
#define glVertexArrayBindingDivisor ARGLVertexArrayBindingDivisor
typedef void (*PFNGLGETVERTEXARRAYIVPROC)(GLuint vaobj, uint32_t pname, GLint *param);
GLAPI PFNGLGETVERTEXARRAYIVPROC ARGLGetVertexArrayiv;
#define glGetVertexArrayiv ARGLGetVertexArrayiv
typedef void (*PFNGLGETVERTEXARRAYINDEXEDIVPROC)(GLuint vaobj, GLuint index, uint32_t pname, GLint *param);
GLAPI PFNGLGETVERTEXARRAYINDEXEDIVPROC ARGLGetVertexArrayIndexediv;
#define glGetVertexArrayIndexediv ARGLGetVertexArrayIndexediv
typedef void (*PFNGLGETVERTEXARRAYINDEXED64IVPROC)(GLuint vaobj, GLuint index, uint32_t pname, GLint64 *param);
GLAPI PFNGLGETVERTEXARRAYINDEXED64IVPROC ARGLGetVertexArrayIndexed64iv;
#define glGetVertexArrayIndexed64iv ARGLGetVertexArrayIndexed64iv
typedef void (*PFNGLCREATESAMPLERSPROC)(GLsizei n, GLuint *samplers);
GLAPI PFNGLCREATESAMPLERSPROC ARGLCreateSamplers;
#define glCreateSamplers ARGLCreateSamplers
typedef void (*PFNGLCREATEPROGRAMPIPELINESPROC)(GLsizei n, GLuint *pipelines);
GLAPI PFNGLCREATEPROGRAMPIPELINESPROC ARGLCreateProgramPipelines;
#define glCreateProgramPipelines ARGLCreateProgramPipelines
typedef void (*PFNGLCREATEQUERIESPROC)(uint32_t target, GLsizei n, GLuint *ids);
GLAPI PFNGLCREATEQUERIESPROC ARGLCreateQueries;
#define glCreateQueries ARGLCreateQueries
typedef void (*PFNGLGETQUERYBUFFEROBJECTI64VPROC)(GLuint id, GLuint buffer, uint32_t pname, GLintptr offset);
GLAPI PFNGLGETQUERYBUFFEROBJECTI64VPROC ARGLGetQueryBufferObjecti64v;
#define glGetQueryBufferObjecti64v ARGLGetQueryBufferObjecti64v
typedef void (*PFNGLGETQUERYBUFFEROBJECTIVPROC)(GLuint id, GLuint buffer, uint32_t pname, GLintptr offset);
GLAPI PFNGLGETQUERYBUFFEROBJECTIVPROC ARGLGetQueryBufferObjectiv;
#define glGetQueryBufferObjectiv ARGLGetQueryBufferObjectiv
typedef void (*PFNGLGETQUERYBUFFEROBJECTUI64VPROC)(GLuint id, GLuint buffer, uint32_t pname, GLintptr offset);
GLAPI PFNGLGETQUERYBUFFEROBJECTUI64VPROC ARGLGetQueryBufferObjectui64v;
#define glGetQueryBufferObjectui64v ARGLGetQueryBufferObjectui64v
typedef void (*PFNGLGETQUERYBUFFEROBJECTUIVPROC)(GLuint id, GLuint buffer, uint32_t pname, GLintptr offset);
GLAPI PFNGLGETQUERYBUFFEROBJECTUIVPROC ARGLGetQueryBufferObjectuiv;
#define glGetQueryBufferObjectuiv ARGLGetQueryBufferObjectuiv
typedef void (*PFNGLMEMORYBARRIERBYREGIONPROC)(GLbitfield barriers);
GLAPI PFNGLMEMORYBARRIERBYREGIONPROC ARGLMemoryBarrierByRegion;
#define glMemoryBarrierByRegion ARGLMemoryBarrierByRegion
typedef void (*PFNGLGETTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, uint32_t format, uint32_t type, GLsizei bufSize, void *pixels);
GLAPI PFNGLGETTEXTURESUBIMAGEPROC ARGLGetTextureSubImage;
#define glGetTextureSubImage ARGLGetTextureSubImage
typedef void (*PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
GLAPI PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC ARGLGetCompressedTextureSubImage;
#define glGetCompressedTextureSubImage ARGLGetCompressedTextureSubImage
typedef uint32_t (*PFNGLGETGRAPHICSRESETSTATUSPROC)(void);
GLAPI PFNGLGETGRAPHICSRESETSTATUSPROC ARGLGetGraphicsResetStatus;
#define glGetGraphicsResetStatus ARGLGetGraphicsResetStatus
typedef void (*PFNGLGETNCOMPRESSEDTEXIMAGEPROC)(uint32_t target, GLint lod, GLsizei bufSize, void *pixels);
GLAPI PFNGLGETNCOMPRESSEDTEXIMAGEPROC ARGLGetnCompressedTexImage;
#define glGetnCompressedTexImage ARGLGetnCompressedTexImage
typedef void (*PFNGLGETNTEXIMAGEPROC)(uint32_t target, GLint level, uint32_t format, uint32_t type, GLsizei bufSize, void *pixels);
GLAPI PFNGLGETNTEXIMAGEPROC ARGLGetnTexImage;
#define glGetnTexImage ARGLGetnTexImage
typedef void (*PFNGLGETNUNIFORMDVPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
GLAPI PFNGLGETNUNIFORMDVPROC ARGLGetnUniformdv;
#define glGetnUniformdv ARGLGetnUniformdv
typedef void (*PFNGLGETNUNIFORMFVPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
GLAPI PFNGLGETNUNIFORMFVPROC ARGLGetnUniformfv;
#define glGetnUniformfv ARGLGetnUniformfv
typedef void (*PFNGLGETNUNIFORMIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLint *params);
GLAPI PFNGLGETNUNIFORMIVPROC ARGLGetnUniformiv;
#define glGetnUniformiv ARGLGetnUniformiv
typedef void (*PFNGLGETNUNIFORMUIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
GLAPI PFNGLGETNUNIFORMUIVPROC ARGLGetnUniformuiv;
#define glGetnUniformuiv ARGLGetnUniformuiv
typedef void (*PFNGLREADNPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, uint32_t format, uint32_t type, GLsizei bufSize, void *data);
GLAPI PFNGLREADNPIXELSPROC ARGLReadnPixels;
#define glReadnPixels ARGLReadnPixels
typedef void (*PFNGLGETNMAPDVPROC)(uint32_t target, uint32_t query, GLsizei bufSize, GLdouble *v);
GLAPI PFNGLGETNMAPDVPROC ARGLGetnMapdv;
#define glGetnMapdv ARGLGetnMapdv
typedef void (*PFNGLGETNMAPFVPROC)(uint32_t target, uint32_t query, GLsizei bufSize, GLfloat *v);
GLAPI PFNGLGETNMAPFVPROC ARGLGetnMapfv;
#define glGetnMapfv ARGLGetnMapfv
typedef void (*PFNGLGETNMAPIVPROC)(uint32_t target, uint32_t query, GLsizei bufSize, GLint *v);
GLAPI PFNGLGETNMAPIVPROC ARGLGetnMapiv;
#define glGetnMapiv ARGLGetnMapiv
typedef void (*PFNGLGETNPIXELMAPFVPROC)(uint32_t map, GLsizei bufSize, GLfloat *values);
GLAPI PFNGLGETNPIXELMAPFVPROC ARGLGetnPixelMapfv;
#define glGetnPixelMapfv ARGLGetnPixelMapfv
typedef void (*PFNGLGETNPIXELMAPUIVPROC)(uint32_t map, GLsizei bufSize, GLuint *values);
GLAPI PFNGLGETNPIXELMAPUIVPROC ARGLGetnPixelMapuiv;
#define glGetnPixelMapuiv ARGLGetnPixelMapuiv
typedef void (*PFNGLGETNPIXELMAPUSVPROC)(uint32_t map, GLsizei bufSize, GLushort *values);
GLAPI PFNGLGETNPIXELMAPUSVPROC ARGLGetnPixelMapusv;
#define glGetnPixelMapusv ARGLGetnPixelMapusv
typedef void (*PFNGLGETNPOLYGONSTIPPLEPROC)(GLsizei bufSize, GLubyte *pattern);
GLAPI PFNGLGETNPOLYGONSTIPPLEPROC ARGLGetnPolygonStipple;
#define glGetnPolygonStipple ARGLGetnPolygonStipple
typedef void (*PFNGLGETNCOLORTABLEPROC)(uint32_t target, uint32_t format, uint32_t type, GLsizei bufSize, void *table);
GLAPI PFNGLGETNCOLORTABLEPROC ARGLGetnColorTable;
#define glGetnColorTable ARGLGetnColorTable
typedef void (*PFNGLGETNCONVOLUTIONFILTERPROC)(uint32_t target, uint32_t format, uint32_t type, GLsizei bufSize, void *image);
GLAPI PFNGLGETNCONVOLUTIONFILTERPROC ARGLGetnConvolutionFilter;
#define glGetnConvolutionFilter ARGLGetnConvolutionFilter
typedef void (*PFNGLGETNSEPARABLEFILTERPROC)(uint32_t target, uint32_t format, uint32_t type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
GLAPI PFNGLGETNSEPARABLEFILTERPROC ARGLGetnSeparableFilter;
#define glGetnSeparableFilter ARGLGetnSeparableFilter
typedef void (*PFNGLGETNHISTOGRAMPROC)(uint32_t target, GLboolean reset, uint32_t format, uint32_t type, GLsizei bufSize, void *values);
GLAPI PFNGLGETNHISTOGRAMPROC ARGLGetnHistogram;
#define glGetnHistogram ARGLGetnHistogram
typedef void (*PFNGLGETNMINMAXPROC)(uint32_t target, GLboolean reset, uint32_t format, uint32_t type, GLsizei bufSize, void *values);
GLAPI PFNGLGETNMINMAXPROC ARGLGetnMinmax;
#define glGetnMinmax ARGLGetnMinmax
typedef void (*PFNGLTEXTUREBARRIERPROC)(void);
GLAPI PFNGLTEXTUREBARRIERPROC ARGLTextureBarrier;
#define glTextureBarrier ARGLTextureBarrier

typedef void (*PFNGLSPECIALIZESHADERPROC)(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
GLAPI PFNGLSPECIALIZESHADERPROC ARGLSpecializeShader;
#define glSpecializeShader ARGLSpecializeShader
typedef void (*PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)(uint32_t mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC ARGLMultiDrawArraysIndirectCount;
#define glMultiDrawArraysIndirectCount ARGLMultiDrawArraysIndirectCount
typedef void (*PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)(uint32_t mode, uint32_t type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC ARGLMultiDrawElementsIndirectCount;
#define glMultiDrawElementsIndirectCount ARGLMultiDrawElementsIndirectCount
typedef void (*PFNGLPOLYGONOFFSETCLAMPPROC)(GLfloat factor, GLfloat units, GLfloat clamp);
GLAPI PFNGLPOLYGONOFFSETCLAMPPROC ARGLPolygonOffsetClamp;
#define glPolygonOffsetClamp ARGLPolygonOffsetClamp